{
  parserClass="org.nim.grammar.NimParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"


  psiClassPrefix="Nim"
  psiImplClassSuffix="Impl"
  psiPackage="org.nim.psi"
  psiImplPackage="org.nim.psi.impl"

  elementTypeHolderClass="org.nim.psi.NimTokenTypes"
  elementTypeClass="org.nim.psi.NimElementType"
  tokenTypeClass="org.nim.psi.NimTokenType"
  psiImplUtilClass="org.nim.grammar.NimPsiImplUtil"
    parserUtilClass="org.nim.grammar.NimParserUtil"
  tokens = [
    BLOCK_COMMENT_START="#["
    BLOCK_COMMENT_END="]#"
    ADDR = 'addr'
    AND = 'and'
    AS = 'as'
    ASM = 'asm'
    BIND = 'bind'
    BLOCK = 'block'
    BREAK = 'break'
    CASE = 'case'
    CAST = 'cast'
    CONCEPT ='concept'
    CONSY = 'const'
    CONTINUE = 'continue'
    CONVERTER='converter'
    DEFER='defer'
    DISCARD='discard'
    DISTINCT='distinct'
    DIV='div'
    DO='do'
    ELIF='elif'
    ELSE='else'
    END='end'
    ENUM='enum'
    EXCEPT='except'
    EXPORT='export'
    FINALLY='finally'
    FOR='for'
    FROM='from'
    FUNC='func'
    IF='if'
    IMPORT='import'
    IN='in'
    INCLUDE='include'
    INTERFACE='interface'
    IS='is'
    ISNOT='isnot'
    ITERATOR='iterator'
    LET='let'
    MACRO='macro'
    METHOD='method'
    MIXIN='mixin'
    MOD='mod'
    NIL='nil'
    NOT='not'
    NOTIN='notin'
    OBJECT='object'
    OF='of'
    OR='or'
    OUT='out'
    PROC='proc'
    PTR='ptr'
    RAISE='raise'
    REF='ref'
    RETURN='return'
    SHL='shl'
    SHR='shr'
    STATIC='static'
    TEMPLATE='template'
    TRY='try'
    TUPLE='tuple'
    TYPE='type'
    USING='using'
    VAR='var'
    WHEN='when'
    WHILE='while'
    XOR='xor'
    YIELD='yield'
    PARAN_DOT_OPEN ='(.'
    PARAN_DOT_CLOSE='.)'
    BRACKET_DOT_OPEN='[.'
    BRACKET_DOT_CLOSE='.]'
    CURLY_DOT_OPEN='{.'
    CURLY_DOT_CLOSE='.}'
    PARAN_OPEN='('
    PARAN_CLOSE=')'
    BRACKET_OPEN='['
    BRACKET_CLOSE=']'
    CURLY_OPEN='{'
    CURLY_CLOSE='}'
    COMMA=','
    SEMI_COLON=';'
    DOUBLE_COLON='::'
    SINGLE_COLON=':'
    EQUAL='='
    DOUBLE_DOT='..'
    DOT='.'
    BRACKET_COLON='[:'
    BACK_TICK='`'
    WHITE_SPACE=' '
    PLUS='+'
    MINUS='-'
    STAR='*'
    FORWAR_SLASH='/'
    BACK_SLASH='\\'
    LESS_THAN='<'
    GREATER_THAN='>'
    EXCLAMATION = '!'
    QUSTION ='?'
    CARET='^'
    OP_OR='|'
    PERCENT='%'
    AMP='&'
    DOLLAR='$'
    AT='@'
    TILDE='~'
    TILDE_IDENTIFIER='<tilde_identifier>'
    CRLF='<crlf>'
    RAW_STRING='<raw_string>'
    COMMENT = '<comment>'
    INDENT= 'INDENT'
    DOC_RUNNABLE = '<doc_runnable>'
    EXAMPLE = '<example>'
    SINGLE_LINE_COMMENT='<single_line_comment>'
  ]
    implements("DeclarationColonEquals")="org.nim.stubs.NimNamedElement"
    extends("DeclarationColonEquals")="org.nim.stubs.NimNamedElementImpl<?>"
    //elementTypeFactory("DeclarationColonEquals")="org.nim.stubs.StubAdapter.adapt"
    extends("(Or|And|Add|At|Conversion|Mul|Selector|Paran|Conditional|If|KW|Spread|Proc)Expression")=BinaryExpression
    extends(".*(Expression|OperandName|Literal)")=Expression
    extends(".*Statement")=Statement
    generateTokenAccessors=true
    consumeTokenMethod("(.*_recover)|(.*Expression)|BinAssignOp") = "consumeTokenFast"
}











File ::= <<beginParsing>> (!<<eof>> Statement)* <<eof>>?

Statement ::=
    ImportSection
    | TypeBlock
    | VarDeclaration
    | ReturnStatement
    | SimpleStatement
    | NewStatement
    | TypeFieldStatement
    | WhileStatement
    | IfStatement
    | ForStatement
    | CaseStatement
    | MethodTypes
    | WhenDeclaration



private PathSeparator ::= FORWAR_SLASH | BACK_SLASH

Symbol ::=
    BACK_TICK BACK_TICK_IDENTIFIER BACK_TICK
    | IDENTIFIER
SymbolWithPragma ::= Symbol STAR? Pragma?
//@todo: Should do Simple Expression
DeclarationColonEquals ::=  <<Commas SymbolWithPragma>> (SINGLE_COLON <<OptionalIndent Expression>>)? (EQUAL <<OptionalIndent Expression>>)?{
    stubClass="org.nim.stubs.DeclarationColonEqualsStub"
    methods=[]
}


private ImportSymbol ::=
    Symbol (PathSeparator Symbol)*
    | StringLiteral

private ImportOrImportAs ::= ImportSymbol [AS IDENTIFIER]

ImportSection ::=
    IMPORT <<Commas ImportOrImportAs>>
    | IMPORT ImportOrImportAs EXCEPT <<Commas ImportSymbol>>
    | FROM ImportOrImportAs IMPORT <<Commas ImportSymbol>>

Indentation ::= INDENT <<increaseIndent>>
Dedentation ::= DEDENT <<decreaseIndent>>

NewStatement ::= NEW PARAN_OPEN Expression PARAN_CLOSE
ReturnStatement ::= RETURN SimpleStatement? | SimpleStatement <<isLast>>
VarDeclaration ::=
    VAR Vars
    | LET Vars
    | CONST Vars

private Vars ::=
    (Indentation  VarAssignment+   Dedentation)
    | ( VarAssignment+  )



VarAssignment ::= VarDefinitionList  VarDec
ExpColonEqExpression ::= Expression [(SINGLE_COLON|EQUAL) Expression ]
SetOrTableLiteral ::= CURLY_OPEN (<<Commas ExpColonEqExpression >> | SINGLE_COLON) CURLY_CLOSE

private VarDec ::=

     (SINGLE_COLON  REF? IDENTIFIER Generics [EQUAL ExpressionList])
    | (SINGLE_COLON REF? TupleType [EQUAL ExpressionList])
    | (SINGLE_COLON REF? IDENTIFIER EQUAL ExpressionList )
    | (SINGLE_COLON REF? IDENTIFIER)
    | EQUAL ExpressionList

private VarDefinitionList ::= <<Commas VarDefinition >>





VarDefinition ::= IDENTIFIER Pragma? STAR?

WhileStatement ::= WHILE Expression SINGLE_COLON Indentation Statement* Dedentation
ForStatement ::= FOR Expression [COMMA Expression] SINGLE_COLON Indentation Statement* Dedentation
IfStatement ::= Ifs
private Ifs ::= IfBlockStatement


TupleType ::= TUPLE BRACKET_OPEN (Parameter (S_or_C Parameter | &BRACKET_CLOSE)*)  BRACKET_CLOSE

CaseStatement ::= CASE Expression SINGLE_COLON? OfBranch+ ElseBranch?

OfBranch ::=  OfAsNonOp <<Commas Expression>> SINGLE_COLON ConditionalStatementOrBlock

ConditionalStatementOrBlock ::= Statement |  (Indentation Statement* Dedentation)
ElseBranch::= ELSE SINGLE_COLON ConditionalStatementOrBlock


IfBlockStatement ::= (WHEN|IF) ConditionalBlock ElseIfStatement* ElseStatement?

ConditionalBlock ::= Expression SINGLE_COLON ConditionalStatementOrBlock
ElseIfStatement ::= ELIF Expression SINGLE_COLON ConditionalStatementOrBlock
ElseStatement ::= ELSE SINGLE_COLON ConditionalStatementOrBlock
Literal ::=  ArrayLiteral | Integer | StringLiteral | CharacterLiteral | Float | SetOrTableLiteral | NIL

BlockDeclaration ::= BLOCK IDENTIFIER SINGLE_COLON MethodBody
WhenDeclaration ::= WHEN IDENTIFIER SINGLE_COLON Statement+

TypeBlock ::=TYPE <<beginTypeBlock>>  Indentation TypeDeclaration+ Dedentation <<endTypeBlock>>

private MethodBody ::= Expression |( Indentation (Statement|WhileStatement|IfStatement|BlockDeclaration)* (<<inProcExpression>> <<hasTrailingParanthesis>> | Dedentation))



TypeFieldStatement ::=<<Commas ObjectField>> SINGLE_COLON REF? OperandName

/**
Deals with Things Like this:
  type
    TE = enum
      blah, blah2

    TestObj = object
      test, asd: int
      case test2: TE <--- This Right Here
      of blah:
        help: string
      else:
        nil

 */
ObjectCase ::= CASE SymbolWithPragma SINGLE_COLON Symbol SINGLE_COLON? <<OptionalIndent  ObjectBranches>>

ObjectWhen ::= WHEN Expression SINGLE_COLON  ObjectPart (ELIF Expression SINGLE_COLON ObjectPart)* (ELSE SINGLE_COLON ObjectPart)?

ObjectPart ::= (Indentation ObjectPart+ Dedentation) | ObjectWhen | ObjectCase | NIL | DISCARD | DeclarationColonEquals
ObjectBranch ::= OfAsNonOp Expression SINGLE_COLON ObjectPart
ObjectBranches ::= ObjectBranch+ (ELIF Expression SINGLE_COLON ObjectPart)* (ELSE SINGLE_COLON ObjectPart)?

Parameters ::= PParameters

private PParameters ::=
(PARAN_OPEN PARAN_CLOSE)
| PARAN_OPEN (Parameter (S_or_C Parameter )*) PARAN_CLOSE

ParameterDefault ::= EQUAL? Expression

MemberTypeAssignment ::= SINGLE_COLON IDENTIFIER Generics?

private OptionalPragma ::= Pragma?
Pragma ::= CURLY_DOT_OPEN IDENTIFIER (COMMA IDENTIFIER)* CURLY_DOT_CLOSE

// For this: template sortedByIt*(seq1, op: untyped)
ParameterNames ::= <<Commas IDENTIFIER>>

Parameter ::= ParameterNames (SINGLE_COLON? VAR? ParameterType? Generics? OptionalPragma ParameterDefault?)?


private ParameterType ::= Closure | <<inProcExpression>> Expression |  IDENTIFIER

Closure ::= PROC Parameters  MemberTypeAssignment? Pragma?

private MethodTypes ::=
    ProcedureMethod
    | TemplateMethod
    | FuncMethod



private Signature ::= Symbol? STAR? Generics? Parameters MemberTypeAssignment? Pragma? EQUAL

meta MethodLike ::= <<p>>  Signature MethodBody?
ProcedureMethod ::= <<MethodLike PROC>>
FuncMethod ::= <<MethodLike FUNC>>
TemplateMethod ::= <<MethodLike TEMPLATE>>

Generics ::= BRACKET_OPEN <<enterMode "GEN">> GenericParam ((COMMA GenericParam) )* <<exitModeSafe "GEN">> BRACKET_CLOSE
GenericInner ::= Expression Generics
GenericParam ::= GenericInner| Generics | Expression

TypeDeclaration ::=  <<isInType>> OperandName OptionalPragma STAR? EQUAL Types

private Types ::=  ObjectDeclaration | EnumDeclaration

ObjectDeclaration ::= REF? ((OBJECT  OfAsNonOp OperandName)| OBJECT | OperandName) [Indentation ObjectFields* Dedentation]

ObjectField ::= IDENTIFIER STAR?
ObjectFields ::=
 ObjectPart
| (<<Commas ObjectField>> SINGLE_COLON REF? OperandName)

EnumDeclaration ::= ENUM Indentation <<Commas OperandName>> Dedentation

Integer ::= (SignedInteger|UnsignedInteger)
Float ::= FLOAT_LIT | FLOAT32_LIT| FLOAT64_LIT
SignedInteger ::= INT_LIT | INT8_LIT | INT16_LIT | INT32_LIT | INT64_LIT
UnsignedInteger ::= UINT_LIT | UINT8_LIT | UINT16_LIT | UINT32_LIT | UINT64_LIT

ArrayLiteral ::= BRACKET_OPEN << OptionalIndentWithEnd (Expression ((COMMA Expression))*)? BRACKET_CLOSE>>

OperandName ::= ReferenceExpression QualifiedReferenceExpression? CallExpression? {elementType=ReferenceExpression}
left QualifiedReferenceExpression ::= DOT IDENTIFIER {elementType=ReferenceExpression}
ReferenceExpression ::= IDENTIFIER { extends=Expression}

StringLiteral ::= DoubleQuotedStringLiteral | RawStringLiteral | TripleQuoteStringLiteral
CharacterLiteral ::= CHAR_LITERAL
DoubleQuotedStringLiteral ::= DOUBLE_QUOTED_LITERAL
RawStringLiteral ::= RAW_STRING
TripleQuoteStringLiteral ::= TRIPLE_DOUBLE_STR


fake BinaryExpression ::= Expression+ {
  methods=[left="Expression[0]" right="Expression[1]" ]
}
UnaryExpression ::= UnaryOp Expression
UnaryOp ::= MINUS
SimpleStatement ::= UMethodExpressionOrLeftHand

private UMethodExpressionOrLeftHand ::= LeftHandExprList [AssignmentStatement | SimpleStatement]

AssignmentStatement ::= AssignmentOp ExpressionList

private AssignmentOp ::= MINUS_ASSIGN | PLUS_ASSIGN | EQUAL

LeftHandExprList ::=  ExpressionList



private ExpressionList ::=  <<Commas Expression>>

SymbolExpression ::=  Symbol

Expression ::=
    AtExpression
    | CastExpression
    | AndExpression
    | OrExpression
    | UranaryConditionalExpression
    | ConditionalExpression
    | MultiplyExpression
    | AddExpression
    | SpreadExpression
    | CallExpression
    | UnaryExpression
    | ProcExpression
    | MaxGroup
    | Op7Expression
    | ChainedExpression
    | BracketExpression
    | StringJoinExpression
    | TupleExpression
    //| IfExpression
    | ParanExpression

ProcExpression ::= PROC <<startProcExpression>> Parameters MemberTypeAssignment? Pragma? EQUAL MethodBody <<endProcExpression>>

private MaxGroup ::= OperandName
| IndexOrSliceExpression
| TypeExpression

| Literal
| SymbolExpression

TupleExpression ::= PARAN_OPEN <<enterMode "PAR">>  Expression ((COMMA &PARAN_CLOSE) | (COMMA Expression)+) <<exitModeSafe "PAR">> PARAN_CLOSE
StringJoinExpression ::= Expression AMP Expression
BracketExpression ::= Expression BRACKET_OPEN BRACKET_CLOSE
ChainedExpression ::= Expression (DOT Expression)+
CastExpression ::= CAST BRACKET_OPEN <<OptionalIndent Expression>> BRACKET_CLOSE PARAN_OPEN <<OptionalIndent Expression >> PARAN_CLOSE
AndExpression ::= Expression OP6 Expression
AtExpression ::= (AT|DOLLAR) Expression
SpreadExpression ::= Expression OP4 Expression
OrExpression ::= Expression OR Expression
UranaryConditionalExpression ::= NOT Expression
ConditionalExpression ::=  Expression OP5 Expression
MultiplyExpression ::= Expression OP1 Expression
AddExpression ::= Expression OP2 Expression
ParanExpression ::=  PARAN_OPEN <<enterMode "PAR">>  Expression  <<exitModeSafe "PAR">> PARAN_CLOSE
Op7Expression ::= Expression OP7 Expression
IndexOrSliceExpression ::= Expression BRACKET_OPEN IndexExprBody BRACKET_CLOSE
private IndexExprBody ::= Expression
//external CallExpression ::= parseCall
CallExpression ::= Expression  Generics? <<noWhiteSpace>> ArgumentList
TypeExpression ::= TYPE ArgumentList
ArgumentList ::= PARAN_OPEN <<enterMode "CALL">>  ExpressionList? <<exitModeSafe "CALL">> PARAN_CLOSE

meta OptionalIndent ::= (Indentation <<p>> Dedentation) | <<p>>
meta OptionalIndentWithEnd ::= (Indentation <<p1>> ((<<p2>> Dedentation)| (Dedentation <<p2>>)) | <<p1>>  <<p2>>)
meta Commas ::= <<p>> (COMMA <<p>>)*
private S_or_C ::= SEMI_COLON | COMMA
private OfAsNonOp ::= <<isNotOperator>> OF
Operator ::=
    OP0
    | OP1
    | OP2
    | OP3
    | OP4
    | OP5
    | OP6
    | OP7
    | OP8

private OP0 ::=
    DOLLAR
    | CARET

private OP1 ::=
    STAR
    | FORWAR_SLASH
    | DIV
    | MOD
    | SHL
    | SHR

private OP2 ::=
    PLUS
    | MINUS

private OP3 ::= AMP

private OP4 ::= DOUBLE_DOT LESS_THAN?

private OP5 ::=
    EQUALS
    | LT_EQUAL
    | LESS_THAN
    | GREATER_THAN
    | GT_EQUAL
    | NOT_EQUAL
    | IN
    | NOTIN
    | IS
    | ISNOT
    | <<isOperator>> OF
    | NOT

private OP6 ::= AND

private OP7 ::=
      OR
     | AND
     | XOR

private OP8 ::=
     AT
     | SINGLE_COLON
     | QUSTION
