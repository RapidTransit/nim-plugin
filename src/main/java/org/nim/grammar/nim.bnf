{
    parserClass="org.nim.grammar.NimParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"


    psiClassPrefix="Nim"
    psiImplClassSuffix="Impl"
    psiPackage="org.nim.psi"
    psiImplPackage="org.nim.psi.impl"
    parserImports=[
        'org.nim.grammar.VariableType'
    ]
    elementTypeHolderClass="org.nim.psi.NimTokenTypes"
    elementTypeClass="org.nim.psi.NimElementType"
    tokenTypeClass="org.nim.psi.NimTokenType"
    psiImplUtilClass="org.nim.grammar.NimPsiImplUtil"
    parserUtilClass="org.nim.grammar.NimParserUtil"

//    implements("DeclarationColonEquals")="org.nim.psi.extension.NimNamedElement"
//    extends("DeclarationColonEquals")="org.nim.stubs.NimNamedElementImpl<?>"
    elementTypeFactory("TypeDeclaration")="org.nim.stubs.NimStubFactory.build"
    extends("(Or|And|Add|At|Conversion|Mul|Selector|Paran|Conditional|If|KW|Spread|Proc)Expression")=BinaryExpression
    extends(".*(StringLiteral)")=StringLiteral
    extends(".*(Expression|OperandName|Literal)")=Expression
    extends(".*(Method)")=MethodLike
    extends(".*Statement")=Statement
    generateTokenAccessors=true
    consumeTokenMethod("(.*_recover)|(.*Expression)|BinAssignOp") = "consumeTokenFast"
    tokens = [
        BLOCK_COMMENT_START="#["
        BLOCK_COMMENT_END="]#"
        ADDR = 'addr'
        AND = 'and'
        AS = 'as'
        ASM = 'asm'
        BIND = 'bind'
        BLOCK = 'block'
        BREAK = 'break'
        CASE = 'case'
        CAST = 'cast'
        CONCEPT ='concept'
        CONSY = 'const'
        CONTINUE = 'continue'
        CONVERTER='converter'
        DEFER='defer'
        DISCARD='discard'
        DISTINCT='distinct'
        DIV='div'
        DO='do'
        ELIF='elif'
        ELSE='else'
        END='end'
        ENUM='enum'
        EXCEPT='except'
        EXPORT='export'
        FINALLY='finally'
        FOR='for'
        FROM='from'
        FUNC='func'
        IF='if'
        IMPORT='import'
        IN='in'
        INCLUDE='include'
        INTERFACE='interface'
        IS='is'
        ISNOT='isnot'
        ITERATOR='iterator'
        LET='let'
        MACRO='macro'
        METHOD='method'
        MIXIN='mixin'
        MOD='mod'
        NIL='nil'
        NOT='not'
        NOTIN='notin'
        OBJECT='object'
        OF='of'
        OR='or'
        OUT='out'
        PROC='proc'
        PTR='ptr'
        RAISE='raise'
        REF='ref'
        RETURN='return'
        SHL='shl'
        SHR='shr'
        STATIC='static'
        TEMPLATE='template'
        TRY='try'
        TUPLE='tuple'
        TYPE='type'
        USING='using'
        VAR='var'
        WHEN='when'
        WHILE='while'
        XOR='xor'
        YIELD='yield'
        PARAN_DOT_OPEN ='(.'
        PARAN_DOT_CLOSE='.)'
        BRACKET_DOT_OPEN='[.'
        BRACKET_DOT_CLOSE='.]'
        CURLY_DOT_OPEN='{.'
        CURLY_DOT_CLOSE='.}'
        PARAN_OPEN='('
        PARAN_CLOSE=')'
        BRACKET_OPEN='['
        BRACKET_CLOSE=']'
        CURLY_OPEN='{'
        CURLY_CLOSE='}'
        COMMA=','
        SEMI_COLON=';'
        DOUBLE_COLON='::'
        SINGLE_COLON=':'
        EQUAL='='
        DOUBLE_DOT='..'
        DOT='.'
        BRACKET_COLON='[:'
        BACK_TICK='`'
        WHITE_SPACE=' '
        PLUS='+'
        MINUS='-'
        STAR='*'
        FORWAR_SLASH='/'
        BACK_SLASH='\\'
        LESS_THAN='<'
        GREATER_THAN='>'
        EXCLAMATION = '!'
        QUSTION ='?'
        CARET='^'
        OP_OR='|'
        PERCENT='%'
        AMP='&'
        DOLLAR='$'
        AT='@'
        TILDE='~'
        TILDE_IDENTIFIER='<tilde_identifier>'
        CRLF='<crlf>'
        RAW_STRING='<raw_string>'
        COMMENT = '<comment>'
        INDENT= 'INDENT'
        DOC_RUNNABLE = '<doc_runnable>'
        EXAMPLE = '<example>'
        SINGLE_LINE_COMMENT='<single_line_comment>'
      ]
}

File ::= <<beginParsing>> (!<<eof>> Statement)* <<eof>>? <<debug>>

Statement ::=
    ImportSection
    | TypeBlock
    | VariableDeclaration
    | ReturnStatement
    | SimpleStatement
    | NewStatement
    | TypeFieldStatements
    | WhileStatement
    | IfStatement
    | ForStatement
    | CaseStatement
    | MethodTypes
    | BlockStatement
    | WhenDeclaration

private PathSeparator ::= FORWAR_SLASH | BACK_SLASH

Symbol ::=
    BACK_TICK BACK_TICK_IDENTIFIER BACK_TICK
    | IDENTIFIER

SymbolWithPragma ::= Symbol STAR? PragmaDeclarationsBlock?

//@todo: Should do Simple Expression
// I forgot what this is :/
TypeField ::=  <<Commas SymbolWithPragma>> (SINGLE_COLON <<OptionalIndent Expression>>)? (EQUAL <<OptionalIndent Expression>>)?{
    stubClass="org.nim.stubs.impl.NimTypeFieldStatementStub"
    methods=[]
}


private ImportSymbol ::=
    Symbol (PathSeparator Symbol)*
    | StringLiteral

private ImportOrImportAs ::= ImportSymbol [AS IDENTIFIER]

ImportSection ::=
    IMPORT <<Commas ImportOrImportAs>>
    | IMPORT ImportOrImportAs EXCEPT <<Commas ImportSymbol>>
    | FROM ImportOrImportAs IMPORT <<Commas ImportSymbol>>

Indentation ::= INDENT <<increaseIndent>>
Dedentation ::= DEDENT <<decreaseIndent>>

NewStatement ::= NEW PARAN_OPEN Expression PARAN_CLOSE
ReturnStatement ::= RETURN SimpleStatement? //| SimpleStatement <<isLast>>


/**
Variable Declaration
 */

//private VariableDeclaration ::= EnclosedVariableDeclaration | TopLevelVariableDeclaration

 VariableDeclaration ::= (VAR | LET | CONST) <<enterVar>> <<OptionalIndent VarAssignment+ >> <<exitVariable>>

/**
    Does not Get Stubbed or Exported
 */
//EnclosedVariableDeclaration ::= <<isInMethodLike>> VariableDeclarationDefinition
//
///**
//This Gets Stubbed and/or Exported
// */
//TopLevelVariableDeclaration ::= !<<isInMethodLike>> VariableDeclarationDefinition

VarAssignment ::= <<Commas VarName >>  VarTypeAndOrAssignment {
    implements=['org.nim.psi.extension.NimVarAssignmentEx']
    mixin='org.nim.psi.mixin.NimVarAssignmentMixin'
}
ExpColonEqExpression ::= Expression [(SINGLE_COLON|EQUAL) Expression ]
SetOrTableLiteral ::= CURLY_OPEN (<<Commas ExpColonEqExpression >> | SINGLE_COLON) CURLY_CLOSE

private VarTypeAndOrAssignment ::=

        //Not sure why this one is optional and others or not, leave as is for now
    (SINGLE_COLON  REF? IDENTIFIER Generics [EQUAL ExpressionList])
    | (SINGLE_COLON REF? TupleType [EQUAL ExpressionList])
    | (SINGLE_COLON REF? IDENTIFIER EQUAL ExpressionList )
    | (SINGLE_COLON REF? IDENTIFIER)
    | EQUAL ExpressionList



VarName ::= IDENTIFIER PragmaDeclarationsBlock? STAR?  {
    implements=['org.nim.psi.extension.NimVarNameExt']
    mixin='org.nim.psi.mixin.NimVarNameMixin'

}





WhileStatement ::= WHILE Expression SINGLE_COLON Indentation Statement* Dedentation
ForStatement ::= FOR Expression [COMMA Expression] SINGLE_COLON Indentation Statement* Dedentation
IfStatement ::= Ifs
private Ifs ::= IfBlockStatement


TupleType ::= TUPLE BRACKET_OPEN (Parameter (S_or_C Parameter | &BRACKET_CLOSE)*)  BRACKET_CLOSE

CaseStatement ::= CASE Expression SINGLE_COLON? OfBranch+ ElseBranch?

OfBranch ::=  OfAsNonOp <<Commas Expression>> SINGLE_COLON ConditionalStatementOrBlock

ConditionalStatementOrBlock ::= Statement |  (Indentation Statement* Dedentation)
ElseBranch::= ELSE SINGLE_COLON ConditionalStatementOrBlock


IfBlockStatement ::= (WHEN|IF) ConditionalBlock ElseIfStatement* ElseStatement?

ConditionalBlock ::= Expression SINGLE_COLON ConditionalStatementOrBlock
ElseIfStatement ::= ELIF Expression SINGLE_COLON ConditionalStatementOrBlock
ElseStatement ::= ELSE SINGLE_COLON ConditionalStatementOrBlock
Literal ::=  ArrayLiteral | Integer | StringLiteral | CharacterLiteral | Float | SetOrTableLiteral | NIL

BlockStatement ::= BLOCK IDENTIFIER SINGLE_COLON MethodBody
WhenDeclaration ::= WHEN IDENTIFIER SINGLE_COLON Statement+



private MethodBody ::= Expression |( Indentation (Statement|WhileStatement|IfStatement|BlockStatement)* (<<inProcExpression>> <<hasTrailingParanthesis>> | Dedentation))



TypeFieldStatements ::=<<Commas ObjectField>> SINGLE_COLON REF? OperandName {
    implements=['org.nim.psi.extension.NimNamedElement']
    mixin='org.nim.psi.mixin.NimTypeFieldStatementMixin'
}


private Parameters ::=
(PARAN_OPEN PARAN_CLOSE)
| PARAN_OPEN (Parameter (S_or_C Parameter )*) PARAN_CLOSE

ParameterDefault ::= EQUAL? Expression

MemberTypeAssignment ::= SINGLE_COLON IDENTIFIER Generics?



PragmaDeclarationsBlock ::= CURLY_DOT_OPEN PragmaDeclaration (COMMA PragmaDeclaration)* CURLY_DOT_CLOSE
PragmaDeclaration ::= IDENTIFIER (SINGLE_COLON (StringLiteral | Integer | Float ))?

// For this: template sortedByIt*(seq1, op: untyped)
ParameterNames ::= <<Commas IDENTIFIER>>

Parameter ::= ParameterNames (SINGLE_COLON? VAR? ParameterType? Generics? PragmaDeclarationsBlock? ParameterDefault?)?


private ParameterType ::= Closure | <<inProcExpression>> Expression |  IDENTIFIER

Closure ::= PROC Parameters  MemberTypeAssignment? PragmaDeclarationsBlock?

private MethodTypes ::=
    ProcedureMethod
    | TemplateMethod
    | FuncMethod



private Signature ::= Symbol? STAR? Generics? Parameters MemberTypeAssignment? PragmaDeclarationsBlock? EQUAL

meta MethodLike ::=  <<p>>  Signature MethodBody?
ProcedureMethod ::= <<MethodLike PROC>>
FuncMethod ::= <<MethodLike FUNC>>
TemplateMethod ::= <<MethodLike TEMPLATE>>

Generics ::= BRACKET_OPEN  GenericParam ((COMMA GenericParam) )*  BRACKET_CLOSE
GenericInner ::= Expression Generics
GenericParam ::= GenericInner| Generics | Expression

// Types

TypeBlock ::=TYPE  <<beginTypeBlock>> Indentation  TypeDeclaration+ Dedentation <<endTypeBlock>> {
  //  pin=2 // Ensures endTypeBlock is called
}
TypeDeclaration ::=  <<isInType>> IDENTIFIER PragmaDeclarationsBlock? STAR? EQUAL ObjectOrEnum {
    implements = [
        "org.nim.psi.extension.NimNamedElement"
        "org.nim.psi.extension.NimType"
    ]
    mixin = "org.nim.psi.mixin.NimTypeDeclarationMixin"
    stubClass = "org.nim.stubs.impl.NimTypeStub"
}


private ObjectOrEnum ::=  ObjectType | EnumType

private ObjectType ::= REF? ((OBJECT [OfAsNonOp OperandName]) | OperandName) [Indentation ObjectFields* Dedentation]

ObjectFields ::= ObjectPart | (<<Commas ObjectField>> SINGLE_COLON REF? OperandName)

ObjectField ::= IDENTIFIER STAR?
/**
Deals with Things Like this:
  type
    TE = enum
      blah, blah2

    TestObj = object
      test, asd: int
      case test2: TE <--- This Right Here
      of blah:
        help: string
      else:
        nil

 */
ObjectCase ::= CASE SymbolWithPragma SINGLE_COLON Symbol SINGLE_COLON? <<OptionalIndent  ObjectBranches>>

ObjectWhen ::= WHEN Expression SINGLE_COLON  ObjectPart (ELIF Expression SINGLE_COLON ObjectPart)* (ELSE SINGLE_COLON ObjectPart)?

ObjectPart ::= (Indentation ObjectPart+ Dedentation) | ObjectWhen | ObjectCase | NIL | DISCARD | TypeField
ObjectBranch ::= OfAsNonOp Expression SINGLE_COLON ObjectPart
ObjectBranches ::= ObjectBranch+ (ELIF Expression SINGLE_COLON ObjectPart)* (ELSE SINGLE_COLON ObjectPart)?


private EnumType ::= ENUM Indentation <<Commas OperandName>> Dedentation

// Literals

Integer ::= (SignedInteger|UnsignedInteger)
Float ::= FLOAT_LIT | FLOAT32_LIT| FLOAT64_LIT
SignedInteger ::= INT_LIT | INT8_LIT | INT16_LIT | INT32_LIT | INT64_LIT
UnsignedInteger ::= UINT_LIT | UINT8_LIT | UINT16_LIT | UINT32_LIT | UINT64_LIT

ArrayLiteral ::= BRACKET_OPEN << OptionalIndentWithEnd (Expression ((COMMA Expression))*)? BRACKET_CLOSE>>

OperandName ::= ReferenceExpression QualifiedReferenceExpression? CallExpression? {elementType=ReferenceExpression}
left QualifiedReferenceExpression ::= DOT IDENTIFIER {elementType=ReferenceExpression}
ReferenceExpression ::= IDENTIFIER { extends=Expression}

StringLiteral ::= DoubleQuotedStringLiteral | RawStringLiteral | TripleQuoteStringLiteral
CharacterLiteral ::= CHAR_LITERAL
DoubleQuotedStringLiteral ::= DOUBLE_QUOTED_LITERAL
RawStringLiteral ::= RAW_STRING
TripleQuoteStringLiteral ::= TRIPLE_DOUBLE_STR


fake BinaryExpression ::= Expression+ {
  methods=[left="Expression[0]" right="Expression[1]" ]
}
UnaryExpression ::= UnaryOp Expression
UnaryOp ::= MINUS
SimpleStatement ::= ExpressionList (AssignmentStatement | SimpleStatement)?



AssignmentStatement ::= AssignmentOp ExpressionList

private AssignmentOp ::= MINUS_ASSIGN | PLUS_ASSIGN | EQUAL


private ExpressionList ::=  <<Commas Expression>>

SymbolExpression ::=  Symbol

Expression ::=
    AtExpression
    | CastExpression
    | AndExpression
    | OrExpression
    | UranaryConditionalExpression
    | ConditionalExpression
    | MultiplyExpression
    | AddExpression
    | SpreadExpression
    | CallExpression
    | UnaryExpression
    | ProcExpression
    | MaxGroup
    | Op7Expression
    | ChainedExpression
    | BracketExpression
    | StringJoinExpression
    | TupleExpression
    //| IfExpression
    | ParanExpression

ProcExpression ::= PROC <<startProcExpression>> Parameters MemberTypeAssignment? PragmaDeclarationsBlock? EQUAL MethodBody <<endProcExpression>>

private MaxGroup ::= OperandName
| IndexOrSliceExpression
| TypeExpression

| Literal
| SymbolExpression

TupleExpression ::= PARAN_OPEN  Expression ((COMMA &PARAN_CLOSE) | (COMMA Expression)+)  PARAN_CLOSE
StringJoinExpression ::= Expression AMP Expression
BracketExpression ::= Expression BRACKET_OPEN BRACKET_CLOSE
ChainedExpression ::= Expression (DOT Expression)+
CastExpression ::= CAST BRACKET_OPEN <<OptionalIndent Expression>> BRACKET_CLOSE PARAN_OPEN <<OptionalIndent Expression >> PARAN_CLOSE
AndExpression ::= Expression OP6 Expression
AtExpression ::= (AT|DOLLAR) Expression
SpreadExpression ::= Expression OP4 Expression
OrExpression ::= Expression OR Expression
UranaryConditionalExpression ::= NOT Expression
ConditionalExpression ::=  Expression OP5 Expression
MultiplyExpression ::= Expression OP1 Expression
AddExpression ::= Expression OP2 Expression
ParanExpression ::=  PARAN_OPEN  Expression   PARAN_CLOSE
Op7Expression ::= Expression OP7 Expression
IndexOrSliceExpression ::= Expression BRACKET_OPEN IndexExprBody BRACKET_CLOSE
private IndexExprBody ::= Expression

CallExpression ::=   Expression  Generics? <<noWhiteSpace>>  PARAN_OPEN <<beginCall>> ExpressionList?  (<<callIndent>> PARAN_CLOSE Dedentation |  PARAN_CLOSE) <<endCall>> {
  pin=3 // Ensures <<endCall>> is called
}
TypeExpression ::= TYPE ArgumentList
ArgumentList ::= PARAN_OPEN  ExpressionList?  (<<callIndent>> PARAN_CLOSE Dedentation | PARAN_CLOSE)
private meta OptionalIndent ::= (Indentation <<p>> Dedentation) | <<p>>
meta OptionalIndentWithEnd ::= (Indentation <<p1>> ((<<p2>> Dedentation)| (Dedentation <<p2>>)) | <<p1>>  <<p2>>)
private meta Commas ::= <<p>> (COMMA <<p>>)*
private S_or_C ::= SEMI_COLON | COMMA
private OfAsNonOp ::= <<isNotOperator>> OF
Operator ::=
    OP0
    | OP1
    | OP2
    | OP3
    | OP4
    | OP5
    | OP6
    | OP7
    | OP8

private OP0 ::=
    DOLLAR
    | CARET

private OP1 ::=
    STAR
    | FORWAR_SLASH
    | DIV
    | MOD
    | SHL
    | SHR

private OP2 ::=
    PLUS
    | MINUS

private OP3 ::= AMP

private OP4 ::= DOUBLE_DOT LESS_THAN?

private OP5 ::=
    EQUALS
    | LT_EQUAL
    | LESS_THAN
    | GREATER_THAN
    | GT_EQUAL
    | NOT_EQUAL
    | IN
    | NOTIN
    | IS
    | ISNOT
    | <<isOperator>> OF
    | NOT

private OP6 ::= AND

private OP7 ::=
      OR
     | AND
     | XOR

private OP8 ::=
     AT
     | SINGLE_COLON
     | QUSTION
