{
  parserClass="org.nim.grammar.NimParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Nim"
  psiImplClassSuffix="Impl"
  psiPackage="org.nim.psi"
  psiImplPackage="org.nim.psi.impl"

  elementTypeHolderClass="org.nim.psi.NimTypes"
  elementTypeClass="org.nim.psi.NimElementType"
  tokenTypeClass="org.nim.psi.NimTokenType"

  tokens = [
   COMMENT='regexp:(#.*)'
   TK_INVALID
   TK_EOF
   TK_SYMBOL
   ADDR = 'addr'
   AND = 'and'
   AS = 'as'
   ASM = 'asm'
   BIND = 'bind'
   BLOCK = 'block'
   BREAK = 'break'
   CASE = 'case'
   CAST = 'cast'
   CONCEPT ='concept'
   CONSY = 'const'
   CONTINUE = 'continue'
   CONVERTER='converter'
   DEFER='defer'
   DISCARD='discard'
   DISTINCT='distinct'
   DIV='div'
   DO='do'
   ELIF='elif'
   ELSE='else'
   END='end'
   ENUM='enum'
   EXCEPT='except'
   EXPORT='export'
   FINALLY='finally'
   FOR='for'
   FROM='from'
   FUNC='func'
   IF='if'
   IMPORT='import'
   IN='in'
   INCLUDE='include'
   INTERFACE='interface'
   IS='is'
   ISNOT='isnot'
   ITERATOR='iterator'
   LET='let'
   MACRO='macro'
   METHOD='method'
   MIXIN='mixin'
   MOD='mod'
   NIL='nil'
   NOT='not'
   NOTIN='notin'
   OBJECT='object'
   OF='of'
   OR='or'
   OUT='out'
   PROC='proc'
   PTR='ptr'
   RAISE='raise'
   REF='ref'
   RETURN='return'
   SHL='shl'
   SHR='shr'
   STATIC='static'
   TEMPLATE='template'
   TRY='try'
   TUPLE='tuple'
   TYPE='type'
   USING='using'
   VAR='var'
   WHEN='when'
   WHILE='while'
   XOR='xor'
   YIELD='yield'
   T_INT_LIT='regexp:\d+'
   T_INT8_LIT
   T_INT16_LIT
   T_INT32_LIT
   T_INT64_LIT
   T_UINT_LIT
   T_UINT8_LIT
   T_UINT16_LIT
   T_UINT32_LIT
   T_UINT64_LIT
   T_FLOAT_LIT
   T_FLOAT32_LIT
   T_FLOAT64_LIT
   T_FLOAT128_LIT
   T_STRING_LIT
   T_R_STRING_LIT
   T_TRIPLE_STRING_LIT
   T_G_STRING_LIT
   T_G_TRIPLE_STRING_LIT
   T_CHAR
   PARAN_DOT_OPEN ='(.'
   PARAN_DOT_CLOSE='.)'
   BRACKET_DOT_OPEN='[.'
   BRACKET_DOT_CLOSE='.]'
   CURLY_DOT_OPEN='{.'
   CURLY_DOT_CLOSE='.}'
   PARAN_OPEN='('
   PARAN_CLOSE=')'
   BRACKET_OPEN=']'
   BRACKET_CLOSE='['
   CURLY_OPEN='{'
   CURLY_CLOSE='}'
   COMMA=','
   SEMI_COLON=';'
   DOUBLE_COLON='::'
   SINGLE_COLON=':'
   EQUAL='='
   DOUBLE_DOT='..'
   DOT='.'
   BRACKET_COLON='[:'
   T_OPERATOR
   T_COMMENT
   TILDE='`'
   SPACE=' '
   T_INFIX_OPERATOR
   T_PREFIX_OPERATOR
   T_POSTFIX_OPERATOR
   OP_PLUS='+'
    OP_MINUS='-'
    OP_MULTIPLY='*'
    OP_FORWAR_SLASH='/'
    OP_BACK_SLASH='\\'
    OP_POINT_LEFT='<'
    OP_POINT_RIGHT='>'
    OP_EXCLAMATION = '!'
    OP_QUSTION ='?'
    OP_CARET='^'
    OP_DOT='.'
    OP_OR='|'
    OP_EQ='='
    OP_PERCENT='%'
    OP_AMP='&'
    OP_DOLLAR='$'
    OP_AT='@'
    OP_TILDE='~'
    OP_COLON=':'
    OP0
    OP1
    OP2
    OP3
    OP4
    OP5
    OP6
    OP7
    OP8
    OP9
    OP10
    IDENTIFIER= 'regexp:[a-zA-Z][a-zA-Z0-9]*'
    NOT_TILDE = 'regexp:[a-zA-Z\\*]+'
    N='\n'
  ]
}

File ::= (COMMENT |CodeBlock)

CodeBlock ::= (Template|Proc|TypeDeclaration)
Template ::= TEMPLATE NOT_TILDE
Proc ::= PROC IDENTIFIER '*'?('[T]')?
TypeDeclaration ::= TYPE