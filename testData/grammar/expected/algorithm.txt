Nim file
  PsiComment(NimTokenType.<single_line_comment>)('#')
  PsiWhiteSpace('\n')
  PsiComment(NimTokenType.<single_line_comment>)('#')
  PsiWhiteSpace('\n')
  PsiComment(NimTokenType.<single_line_comment>)('#            Nim's Runtime Library')
  PsiWhiteSpace('\n')
  PsiComment(NimTokenType.<single_line_comment>)('#        (c) Copyright 2015 Andreas Rumpf')
  PsiWhiteSpace('\n')
  PsiComment(NimTokenType.<single_line_comment>)('#')
  PsiWhiteSpace('\n')
  PsiComment(NimTokenType.<single_line_comment>)('#    See the file "copying.txt", included in this')
  PsiWhiteSpace('\n')
  PsiComment(NimTokenType.<single_line_comment>)('#    distribution, for details about the copyright.')
  PsiWhiteSpace('\n')
  PsiComment(NimTokenType.<single_line_comment>)('#')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(NimTokenType.<single_line_comment>)('## This module implements some common generic algorithms.')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimTypeBlockImpl(TYPE_BLOCK)
      PsiElement(NimTokenType.type)('type')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimTypeDeclarationImpl(TYPE_DECLARATION)
        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
          PsiElement(NimTokenType.IDENTIFIER)('SortOrder')
        PsiElement(NimTokenType.*)('*')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.=)('=')
        PsiWhiteSpace(' ')
        NimEnumDeclarationImpl(ENUM_DECLARATION)
          PsiElement(NimTokenType.enum)('enum')
          NimIndentationImpl(INDENTATION)
            PsiElement(NimTokenType.INDENT)('\n    ')
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('Descending')
          PsiElement(NimTokenType.,)(',')
          PsiWhiteSpace(' ')
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('Ascending')
        PsiWhiteSpace('\n')
        PsiWhiteSpace('\n')
        NimDedentationImpl(DEDENTATION)
          <empty list>
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.`)('`')
      PsiElement(NimTokenType.BACK_TICK_IDENTIFIER)('*')
      PsiElement(NimTokenType.`)('`')
      PsiElement(NimTokenType.*)('*')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('x')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('int')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('order')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('SortOrder')
        PsiElement(NimTokenType.))(')')
      NimReturnTypeImpl(RETURN_TYPE)
        PsiElement(NimTokenType.:)(':')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.IDENTIFIER)('int')
      PsiWhiteSpace(' ')
      NimPragmaImpl(PRAGMA)
        PsiElement(NimTokenType.{.)('{.')
        PsiElement(NimTokenType.IDENTIFIER)('inline')
        PsiElement(NimTokenType..})('.}')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## flips ``x`` if ``order == Descending``.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## If ``order == Ascending`` then ``x`` is returned.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## ``x`` is supposed to be the result of a comparator, i.e.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## | ``< 0`` for *less than*,')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## | ``== 0`` for *equal*,')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## | ``> 0`` for *greater than*.')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimStatementImpl(STATEMENT)
        NimVarDeclarationImpl(VAR_DECLARATION)
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          NimVarSpecImpl(VAR_SPEC)
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('y')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimAddExpressionImpl(ADD_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('order')
                PsiElement(NimTokenType..)('.')
                PsiElement(NimTokenType.IDENTIFIER)('ord')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.-)('-')
              PsiWhiteSpace(' ')
              NimLiteralImpl(LITERAL)
                NimIntegerImpl(INTEGER)
                  NimSignedIntegerImpl(SIGNED_INTEGER)
                    PsiElement(NimTokenType.INT_LIT)('1')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
        NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('result')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.=)('=')
        PsiWhiteSpace(' ')
        NimAddExpressionImpl(ADD_EXPRESSION)
          NimParanExpressionImpl(PARAN_EXPRESSION)
            PsiElement(NimTokenType.()('(')
            NimOp7ExpressionImpl(OP_7_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('x')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.xor)('xor')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('y')
            PsiElement(NimTokenType.))(')')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.-)('-')
          PsiWhiteSpace(' ')
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('y')
      PsiWhiteSpace('\n')
      PsiWhiteSpace('\n')
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimTemplateMethodImpl(TEMPLATE_METHOD)
      PsiElement(NimTokenType.template)('template')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('fillImpl')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('first')
            PsiElement(NimTokenType.,)(',')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.IDENTIFIER)('last')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('int')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('value')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.))(')')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimStatementImpl(STATEMENT)
        NimVarDeclarationImpl(VAR_DECLARATION)
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          NimVarSpecImpl(VAR_SPEC)
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('x')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('first')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimWhileStatementImpl(WHILE_STATEMENT)
        PsiElement(NimTokenType.while)('while')
        PsiWhiteSpace(' ')
        NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('x')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.LT_EQUAL)('<=')
          PsiWhiteSpace(' ')
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('last')
        PsiElement(NimTokenType.:)(':')
        NimIndentationImpl(INDENTATION)
          PsiElement(NimTokenType.INDENT)('\n    ')
        NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
          NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
            NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('a')
              PsiElement(NimTokenType.[)('[')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('x')
              PsiElement(NimTokenType.])(']')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.=)('=')
          PsiWhiteSpace(' ')
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('value')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        NimSimpleStatementImpl(SIMPLE_STATEMENT)
          NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
            NimCallExpressionImpl(CALL_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('inc')
              NimArgumentListImpl(ARGUMENT_LIST)
                PsiElement(NimTokenType.()('(')
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('x')
                PsiElement(NimTokenType.))(')')
        PsiWhiteSpace('\n')
        PsiWhiteSpace('\n')
        NimDedentationImpl(DEDENTATION)
          <empty list>
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('fill')
      PsiElement(NimTokenType.*)('*')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('first')
            PsiElement(NimTokenType.,)(',')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.IDENTIFIER)('last')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('Natural')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('value')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.))(')')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## fills the slice ``a[first..last]`` with ``value``.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<example>)('runnableExamples:')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('var a: array[6, int]')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('a.fill(1, 3, 9)')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('doAssert a == [0, 9, 9, 9, 0, 0]')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimSimpleStatementImpl(SIMPLE_STATEMENT)
        NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
          NimCallExpressionImpl(CALL_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('fillImpl')
            NimArgumentListImpl(ARGUMENT_LIST)
              PsiElement(NimTokenType.()('(')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('a')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('first')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('last')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('value')
              PsiElement(NimTokenType.))(')')
      PsiWhiteSpace('\n')
      PsiWhiteSpace('\n')
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('fill')
      PsiElement(NimTokenType.*)('*')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('value')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.))(')')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## fills the container ``a`` with ``value``.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<example>)('runnableExamples:')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('var a: array[6, int]')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('a.fill(9)')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('doAssert a == [9, 9, 9, 9, 9, 9]')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimSimpleStatementImpl(SIMPLE_STATEMENT)
        NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
          NimCallExpressionImpl(CALL_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('fillImpl')
            NimArgumentListImpl(ARGUMENT_LIST)
              PsiElement(NimTokenType.()('(')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('a')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimLiteralImpl(LITERAL)
                NimIntegerImpl(INTEGER)
                  NimSignedIntegerImpl(SIGNED_INTEGER)
                    PsiElement(NimTokenType.INT_LIT)('0')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('a')
                PsiElement(NimTokenType..)('.')
                PsiElement(NimTokenType.IDENTIFIER)('high')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('value')
              PsiElement(NimTokenType.))(')')
      PsiWhiteSpace('\n')
      PsiWhiteSpace('\n')
      PsiWhiteSpace('\n')
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('reverse')
      PsiElement(NimTokenType.*)('*')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('first')
            PsiElement(NimTokenType.,)(',')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.IDENTIFIER)('last')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('Natural')
        PsiElement(NimTokenType.))(')')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## reverses the slice ``a[first..last]``.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<example>)('runnableExamples:')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('var a = [1, 2, 3, 4, 5, 6]')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('a.reverse(1, 3)')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('doAssert a == [1, 4, 3, 2, 5, 6]')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimStatementImpl(STATEMENT)
        NimVarDeclarationImpl(VAR_DECLARATION)
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          NimVarSpecImpl(VAR_SPEC)
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('x')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('first')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimStatementImpl(STATEMENT)
        NimVarDeclarationImpl(VAR_DECLARATION)
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          NimVarSpecImpl(VAR_SPEC)
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('y')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('last')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimWhileStatementImpl(WHILE_STATEMENT)
        PsiElement(NimTokenType.while)('while')
        PsiWhiteSpace(' ')
        NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('x')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.<)('<')
          PsiWhiteSpace(' ')
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('y')
        PsiElement(NimTokenType.:)(':')
        NimIndentationImpl(INDENTATION)
          PsiElement(NimTokenType.INDENT)('\n    ')
        NimSimpleStatementImpl(SIMPLE_STATEMENT)
          NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
            NimCallExpressionImpl(CALL_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('swap')
              NimArgumentListImpl(ARGUMENT_LIST)
                PsiElement(NimTokenType.()('(')
                NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('a')
                  PsiElement(NimTokenType.[)('[')
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('x')
                  PsiElement(NimTokenType.])(']')
                PsiElement(NimTokenType.,)(',')
                PsiWhiteSpace(' ')
                NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('a')
                  PsiElement(NimTokenType.[)('[')
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('y')
                  PsiElement(NimTokenType.])(']')
                PsiElement(NimTokenType.))(')')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          NimSimpleStatementImpl(SIMPLE_STATEMENT)
            NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
              NimCallExpressionImpl(CALL_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('dec')
                NimArgumentListImpl(ARGUMENT_LIST)
                  PsiElement(NimTokenType.()('(')
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('y')
                  PsiElement(NimTokenType.))(')')
            PsiWhiteSpace('\n')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            NimSimpleStatementImpl(SIMPLE_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimCallExpressionImpl(CALL_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('inc')
                  NimArgumentListImpl(ARGUMENT_LIST)
                    PsiElement(NimTokenType.()('(')
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('x')
                    PsiElement(NimTokenType.))(')')
        PsiWhiteSpace('\n')
        PsiWhiteSpace('\n')
        NimDedentationImpl(DEDENTATION)
          <empty list>
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('reverse')
      PsiElement(NimTokenType.*)('*')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.))(')')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## reverses the contents of the container ``a``.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<example>)('runnableExamples:')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('var a = [1, 2, 3, 4, 5, 6]')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('a.reverse()')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('doAssert  a == [6, 5, 4, 3, 2, 1]')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimSimpleStatementImpl(SIMPLE_STATEMENT)
        NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
          NimCallExpressionImpl(CALL_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('reverse')
            NimArgumentListImpl(ARGUMENT_LIST)
              PsiElement(NimTokenType.()('(')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('a')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimLiteralImpl(LITERAL)
                NimIntegerImpl(INTEGER)
                  NimSignedIntegerImpl(SIGNED_INTEGER)
                    PsiElement(NimTokenType.INT_LIT)('0')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimCallExpressionImpl(CALL_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('max')
                NimArgumentListImpl(ARGUMENT_LIST)
                  PsiElement(NimTokenType.()('(')
                  NimLiteralImpl(LITERAL)
                    NimIntegerImpl(INTEGER)
                      NimSignedIntegerImpl(SIGNED_INTEGER)
                        PsiElement(NimTokenType.INT_LIT)('0')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('a')
                    PsiElement(NimTokenType..)('.')
                    PsiElement(NimTokenType.IDENTIFIER)('high')
                  PsiElement(NimTokenType.))(')')
              PsiElement(NimTokenType.))(')')
      PsiWhiteSpace('\n')
      PsiWhiteSpace('\n')
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('reversed')
      PsiElement(NimTokenType.*)('*')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('first')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('Natural')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('last')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('int')
        PsiElement(NimTokenType.))(')')
      NimReturnTypeImpl(RETURN_TYPE)
        PsiElement(NimTokenType.:)(':')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.IDENTIFIER)('seq')
        NimGenericsImpl(GENERICS)
          PsiElement(NimTokenType.[)('[')
          PsiElement(NimTokenType.IDENTIFIER)('T')
          PsiElement(NimTokenType.])(']')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## returns the reverse of the slice ``a[first..last]``.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<example>)('runnableExamples:')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('let')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('a = [1, 2, 3, 4, 5, 6]')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('b = reversed(a, 1, 3)')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('doAssert b == @[4, 3, 2]')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimSimpleStatementImpl(SIMPLE_STATEMENT)
        NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('assert')
        PsiWhiteSpace(' ')
        NimSimpleStatementImpl(SIMPLE_STATEMENT)
          NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
            NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('last')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.GT_EQUAL)('>=')
              PsiWhiteSpace(' ')
              NimAddExpressionImpl(ADD_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('first')
                PsiElement(NimTokenType.-)('-')
                NimLiteralImpl(LITERAL)
                  NimIntegerImpl(INTEGER)
                    NimSignedIntegerImpl(SIGNED_INTEGER)
                      PsiElement(NimTokenType.INT_LIT)('1')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimStatementImpl(STATEMENT)
        NimVarDeclarationImpl(VAR_DECLARATION)
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          NimVarSpecImpl(VAR_SPEC)
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('i')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimAddExpressionImpl(ADD_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('last')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.-)('-')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('first')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimStatementImpl(STATEMENT)
        NimVarDeclarationImpl(VAR_DECLARATION)
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          NimVarSpecImpl(VAR_SPEC)
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('x')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('first')
              PsiElement(NimTokenType..)('.')
              PsiElement(NimTokenType.IDENTIFIER)('int')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
        NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('result')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.=)('=')
        PsiWhiteSpace(' ')
        NimCallExpressionImpl(CALL_EXPRESSION)
          NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('newSeq')
            PsiElement(NimTokenType.[)('[')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
          NimArgumentListImpl(ARGUMENT_LIST)
            PsiElement(NimTokenType.()('(')
            NimAddExpressionImpl(ADD_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('i')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.+)('+')
              PsiWhiteSpace(' ')
              NimLiteralImpl(LITERAL)
                NimIntegerImpl(INTEGER)
                  NimSignedIntegerImpl(SIGNED_INTEGER)
                    PsiElement(NimTokenType.INT_LIT)('1')
            PsiElement(NimTokenType.))(')')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimWhileStatementImpl(WHILE_STATEMENT)
        PsiElement(NimTokenType.while)('while')
        PsiWhiteSpace(' ')
        NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('i')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.GT_EQUAL)('>=')
          PsiWhiteSpace(' ')
          NimLiteralImpl(LITERAL)
            NimIntegerImpl(INTEGER)
              NimSignedIntegerImpl(SIGNED_INTEGER)
                PsiElement(NimTokenType.INT_LIT)('0')
        PsiElement(NimTokenType.:)(':')
        NimIndentationImpl(INDENTATION)
          PsiElement(NimTokenType.INDENT)('\n    ')
        NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
          NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
            NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('result')
              PsiElement(NimTokenType.[)('[')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('i')
              PsiElement(NimTokenType.])(']')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.=)('=')
          PsiWhiteSpace(' ')
          NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('a')
            PsiElement(NimTokenType.[)('[')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('x')
            PsiElement(NimTokenType.])(']')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        NimSimpleStatementImpl(SIMPLE_STATEMENT)
          NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
            NimCallExpressionImpl(CALL_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('dec')
              NimArgumentListImpl(ARGUMENT_LIST)
                PsiElement(NimTokenType.()('(')
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('i')
                PsiElement(NimTokenType.))(')')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          NimSimpleStatementImpl(SIMPLE_STATEMENT)
            NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
              NimCallExpressionImpl(CALL_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('inc')
                NimArgumentListImpl(ARGUMENT_LIST)
                  PsiElement(NimTokenType.()('(')
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('x')
                  PsiElement(NimTokenType.))(')')
        PsiWhiteSpace('\n')
        PsiWhiteSpace('\n')
        NimDedentationImpl(DEDENTATION)
          <empty list>
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('reversed')
      PsiElement(NimTokenType.*)('*')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.))(')')
      NimReturnTypeImpl(RETURN_TYPE)
        PsiElement(NimTokenType.:)(':')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.IDENTIFIER)('seq')
        NimGenericsImpl(GENERICS)
          PsiElement(NimTokenType.[)('[')
          PsiElement(NimTokenType.IDENTIFIER)('T')
          PsiElement(NimTokenType.])(']')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## returns the reverse of the container ``a``.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<example>)('runnableExamples:')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('let')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('a = [1, 2, 3, 4, 5, 6]')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('b = reversed(a)')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('doAssert b == @[6, 5, 4, 3, 2, 1]')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimSimpleStatementImpl(SIMPLE_STATEMENT)
        NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
          NimCallExpressionImpl(CALL_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('reversed')
            NimArgumentListImpl(ARGUMENT_LIST)
              PsiElement(NimTokenType.()('(')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('a')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimLiteralImpl(LITERAL)
                NimIntegerImpl(INTEGER)
                  NimSignedIntegerImpl(SIGNED_INTEGER)
                    PsiElement(NimTokenType.INT_LIT)('0')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('a')
                PsiElement(NimTokenType..)('.')
                PsiElement(NimTokenType.IDENTIFIER)('high')
              PsiElement(NimTokenType.))(')')
      PsiWhiteSpace('\n')
      PsiWhiteSpace('\n')
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('binarySearch')
      PsiElement(NimTokenType.*)('*')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        NimGenericsAdditionalImpl(GENERICS_ADDITIONAL)
          PsiElement(NimTokenType.,)(',')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('K')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('key')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('K')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('cmp')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          NimClosureImpl(CLOSURE)
            PsiElement(NimTokenType.proc)('proc')
            PsiWhiteSpace(' ')
            NimParametersImpl(PARAMETERS)
              PsiElement(NimTokenType.()('(')
              NimParameterImpl(PARAMETER)
                NimParamterNamesImpl(PARAMTER_NAMES)
                  PsiElement(NimTokenType.IDENTIFIER)('x')
                PsiElement(NimTokenType.:)(':')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.IDENTIFIER)('T')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimParameterImpl(PARAMETER)
                NimParamterNamesImpl(PARAMTER_NAMES)
                  PsiElement(NimTokenType.IDENTIFIER)('y')
                PsiElement(NimTokenType.:)(':')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.IDENTIFIER)('K')
              PsiElement(NimTokenType.))(')')
            NimReturnTypeImpl(RETURN_TYPE)
              PsiElement(NimTokenType.:)(':')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.IDENTIFIER)('int')
            PsiWhiteSpace(' ')
            NimPragmaImpl(PRAGMA)
              PsiElement(NimTokenType.{.)('{.')
              PsiElement(NimTokenType.IDENTIFIER)('closure')
              PsiElement(NimTokenType..})('.}')
        PsiElement(NimTokenType.))(')')
      NimReturnTypeImpl(RETURN_TYPE)
        PsiElement(NimTokenType.:)(':')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.IDENTIFIER)('int')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## Binary search for ``key`` in ``a``. Returns -1 if not found.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## ``cmp`` is the comparator function to use, the expected return values are')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## the same as that of system.cmp.')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimIfBlockStatementImpl(IF_BLOCK_STATEMENT)
        PsiElement(NimTokenType.if)('if')
        PsiWhiteSpace(' ')
        NimConditionalBlockImpl(CONDITIONAL_BLOCK)
          NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('a')
              PsiElement(NimTokenType..)('.')
              PsiElement(NimTokenType.IDENTIFIER)('len')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.EQUALS)('==')
            PsiWhiteSpace(' ')
            NimLiteralImpl(LITERAL)
              NimIntegerImpl(INTEGER)
                NimSignedIntegerImpl(SIGNED_INTEGER)
                  PsiElement(NimTokenType.INT_LIT)('0')
          PsiElement(NimTokenType.:)(':')
          NimIndentationImpl(INDENTATION)
            PsiElement(NimTokenType.INDENT)('\n    ')
          NimReturnStatementImpl(RETURN_STATEMENT)
            PsiElement(NimTokenType.return)('return')
            PsiWhiteSpace(' ')
            NimSimpleStatementImpl(SIMPLE_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimUnaryExpressionImpl(UNARY_EXPRESSION)
                  NimUnaryOpImpl(UNARY_OP)
                    PsiElement(NimTokenType.-)('-')
                  NimLiteralImpl(LITERAL)
                    NimIntegerImpl(INTEGER)
                      NimSignedIntegerImpl(SIGNED_INTEGER)
                        PsiElement(NimTokenType.INT_LIT)('1')
          PsiWhiteSpace('\n')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          NimDedentationImpl(DEDENTATION)
            <empty list>
      NimStatementImpl(STATEMENT)
        NimVarDeclarationImpl(VAR_DECLARATION)
          PsiElement(NimTokenType.let)('let')
          PsiWhiteSpace(' ')
          NimVarSpecImpl(VAR_SPEC)
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('len')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('a')
              PsiElement(NimTokenType..)('.')
              PsiElement(NimTokenType.IDENTIFIER)('len')
      PsiWhiteSpace('\n')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimIfBlockStatementImpl(IF_BLOCK_STATEMENT)
        PsiElement(NimTokenType.if)('if')
        PsiWhiteSpace(' ')
        NimConditionalBlockImpl(CONDITIONAL_BLOCK)
          NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('len')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.EQUALS)('==')
            PsiWhiteSpace(' ')
            NimLiteralImpl(LITERAL)
              NimIntegerImpl(INTEGER)
                NimSignedIntegerImpl(SIGNED_INTEGER)
                  PsiElement(NimTokenType.INT_LIT)('1')
          PsiElement(NimTokenType.:)(':')
          NimIndentationImpl(INDENTATION)
            PsiElement(NimTokenType.INDENT)('\n    ')
          NimIfBlockStatementImpl(IF_BLOCK_STATEMENT)
            PsiElement(NimTokenType.if)('if')
            PsiWhiteSpace(' ')
            NimConditionalBlockImpl(CONDITIONAL_BLOCK)
              NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
                NimCallExpressionImpl(CALL_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('cmp')
                  NimArgumentListImpl(ARGUMENT_LIST)
                    PsiElement(NimTokenType.()('(')
                    NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('a')
                      PsiElement(NimTokenType.[)('[')
                      NimLiteralImpl(LITERAL)
                        NimIntegerImpl(INTEGER)
                          NimSignedIntegerImpl(SIGNED_INTEGER)
                            PsiElement(NimTokenType.INT_LIT)('0')
                      PsiElement(NimTokenType.])(']')
                    PsiElement(NimTokenType.,)(',')
                    PsiWhiteSpace(' ')
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('key')
                    PsiElement(NimTokenType.))(')')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.EQUALS)('==')
                PsiWhiteSpace(' ')
                NimLiteralImpl(LITERAL)
                  NimIntegerImpl(INTEGER)
                    NimSignedIntegerImpl(SIGNED_INTEGER)
                      PsiElement(NimTokenType.INT_LIT)('0')
              PsiElement(NimTokenType.:)(':')
              NimIndentationImpl(INDENTATION)
                PsiElement(NimTokenType.INDENT)('\n      ')
              NimReturnStatementImpl(RETURN_STATEMENT)
                PsiElement(NimTokenType.return)('return')
                PsiWhiteSpace(' ')
                NimSimpleStatementImpl(SIMPLE_STATEMENT)
                  NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                    NimLiteralImpl(LITERAL)
                      NimIntegerImpl(INTEGER)
                        NimSignedIntegerImpl(SIGNED_INTEGER)
                          PsiElement(NimTokenType.INT_LIT)('0\n    ')
              NimDedentationImpl(DEDENTATION)
                <empty list>
            NimElseStatementImpl(ELSE_STATEMENT)
              PsiElement(NimTokenType.else)('else')
              PsiElement(NimTokenType.:)(':')
              NimIndentationImpl(INDENTATION)
                PsiElement(NimTokenType.INDENT)('\n      ')
              NimReturnStatementImpl(RETURN_STATEMENT)
                PsiElement(NimTokenType.return)('return')
                PsiWhiteSpace(' ')
                NimSimpleStatementImpl(SIMPLE_STATEMENT)
                  NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                    NimUnaryExpressionImpl(UNARY_EXPRESSION)
                      NimUnaryOpImpl(UNARY_OP)
                        PsiElement(NimTokenType.-)('-')
                      NimLiteralImpl(LITERAL)
                        NimIntegerImpl(INTEGER)
                          NimSignedIntegerImpl(SIGNED_INTEGER)
                            PsiElement(NimTokenType.INT_LIT)('1')
              PsiWhiteSpace('\n')
              PsiWhiteSpace('\n')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              NimDedentationImpl(DEDENTATION)
                <empty list>
          NimDedentationImpl(DEDENTATION)
            <empty list>
      NimIfBlockStatementImpl(IF_BLOCK_STATEMENT)
        PsiElement(NimTokenType.if)('if')
        PsiWhiteSpace(' ')
        NimConditionalBlockImpl(CONDITIONAL_BLOCK)
          NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
            NimParanExpressionImpl(PARAN_EXPRESSION)
              PsiElement(NimTokenType.()('(')
              NimAndExpressionImpl(AND_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('len')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.and)('and')
                PsiWhiteSpace(' ')
                NimParanExpressionImpl(PARAN_EXPRESSION)
                  PsiElement(NimTokenType.()('(')
                  NimAddExpressionImpl(ADD_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('len')
                    PsiWhiteSpace(' ')
                    PsiElement(NimTokenType.-)('-')
                    PsiWhiteSpace(' ')
                    NimLiteralImpl(LITERAL)
                      NimIntegerImpl(INTEGER)
                        NimSignedIntegerImpl(SIGNED_INTEGER)
                          PsiElement(NimTokenType.INT_LIT)('1')
                  PsiElement(NimTokenType.))(')')
              PsiElement(NimTokenType.))(')')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.EQUALS)('==')
            PsiWhiteSpace(' ')
            NimLiteralImpl(LITERAL)
              NimIntegerImpl(INTEGER)
                NimSignedIntegerImpl(SIGNED_INTEGER)
                  PsiElement(NimTokenType.INT_LIT)('0')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiComment(NimTokenType.<single_line_comment>)('# when `len` is a power of 2, a faster shr can be used.')
          NimIndentationImpl(INDENTATION)
            PsiElement(NimTokenType.INDENT)('\n    ')
          NimStatementImpl(STATEMENT)
            NimVarDeclarationImpl(VAR_DECLARATION)
              PsiElement(NimTokenType.var)('var')
              PsiWhiteSpace(' ')
              NimVarSpecImpl(VAR_SPEC)
                NimVarDefinitionImpl(VAR_DEFINITION)
                  PsiElement(NimTokenType.IDENTIFIER)('step')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.=)('=')
                PsiWhiteSpace(' ')
                NimMultiplyExpressionImpl(MULTIPLY_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('len')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.shr)('shr')
                  PsiWhiteSpace(' ')
                  NimLiteralImpl(LITERAL)
                    NimIntegerImpl(INTEGER)
                      NimSignedIntegerImpl(SIGNED_INTEGER)
                        PsiElement(NimTokenType.INT_LIT)('1')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          NimStatementImpl(STATEMENT)
            NimVarDeclarationImpl(VAR_DECLARATION)
              PsiElement(NimTokenType.var)('var')
              PsiWhiteSpace(' ')
              NimVarSpecImpl(VAR_SPEC)
                NimVarDefinitionImpl(VAR_DEFINITION)
                  PsiElement(NimTokenType.IDENTIFIER)('cmpRes')
                PsiElement(NimTokenType.:)(':')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.IDENTIFIER)('int')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          NimWhileStatementImpl(WHILE_STATEMENT)
            PsiElement(NimTokenType.while)('while')
            PsiWhiteSpace(' ')
            NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('step')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.>)('>')
              PsiWhiteSpace(' ')
              NimLiteralImpl(LITERAL)
                NimIntegerImpl(INTEGER)
                  NimSignedIntegerImpl(SIGNED_INTEGER)
                    PsiElement(NimTokenType.INT_LIT)('0')
            PsiElement(NimTokenType.:)(':')
            NimIndentationImpl(INDENTATION)
              PsiElement(NimTokenType.INDENT)('\n      ')
            NimStatementImpl(STATEMENT)
              NimVarDeclarationImpl(VAR_DECLARATION)
                PsiElement(NimTokenType.let)('let')
                PsiWhiteSpace(' ')
                NimVarSpecImpl(VAR_SPEC)
                  NimVarDefinitionImpl(VAR_DEFINITION)
                    PsiElement(NimTokenType.IDENTIFIER)('i')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.=)('=')
                  PsiWhiteSpace(' ')
                  NimOrExpressionImpl(OR_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('result')
                    PsiWhiteSpace(' ')
                    PsiElement(NimTokenType.or)('or')
                    PsiWhiteSpace(' ')
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('step')
            PsiWhiteSpace('\n')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('cmpRes')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.=)('=')
              PsiWhiteSpace(' ')
              NimCallExpressionImpl(CALL_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('cmp')
                NimArgumentListImpl(ARGUMENT_LIST)
                  PsiElement(NimTokenType.()('(')
                  NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('a')
                    PsiElement(NimTokenType.[)('[')
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('i')
                    PsiElement(NimTokenType.])(']')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('key')
                  PsiElement(NimTokenType.))(')')
            PsiWhiteSpace('\n')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            NimIfBlockStatementImpl(IF_BLOCK_STATEMENT)
              PsiElement(NimTokenType.if)('if')
              PsiWhiteSpace(' ')
              NimConditionalBlockImpl(CONDITIONAL_BLOCK)
                NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('cmpRes')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.EQUALS)('==')
                  PsiWhiteSpace(' ')
                  NimLiteralImpl(LITERAL)
                    NimIntegerImpl(INTEGER)
                      NimSignedIntegerImpl(SIGNED_INTEGER)
                        PsiElement(NimTokenType.INT_LIT)('0')
                PsiElement(NimTokenType.:)(':')
                NimIndentationImpl(INDENTATION)
                  PsiElement(NimTokenType.INDENT)('\n        ')
                NimReturnStatementImpl(RETURN_STATEMENT)
                  PsiElement(NimTokenType.return)('return')
                  PsiWhiteSpace(' ')
                  NimSimpleStatementImpl(SIMPLE_STATEMENT)
                    NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('i')
                PsiWhiteSpace('\n')
                PsiWhiteSpace('\n')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                NimDedentationImpl(DEDENTATION)
                  <empty list>
            NimIfBlockStatementImpl(IF_BLOCK_STATEMENT)
              PsiElement(NimTokenType.if)('if')
              PsiWhiteSpace(' ')
              NimConditionalBlockImpl(CONDITIONAL_BLOCK)
                NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('cmpRes')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.<)('<')
                  PsiWhiteSpace(' ')
                  NimLiteralImpl(LITERAL)
                    NimIntegerImpl(INTEGER)
                      NimSignedIntegerImpl(SIGNED_INTEGER)
                        PsiElement(NimTokenType.INT_LIT)('1')
                PsiElement(NimTokenType.:)(':')
                NimIndentationImpl(INDENTATION)
                  PsiElement(NimTokenType.INDENT)('\n        ')
                NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
                  NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('result')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.=)('=')
                  PsiWhiteSpace(' ')
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('i\n      ')
                NimDedentationImpl(DEDENTATION)
                  <empty list>
            NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('step')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.=)('=')
              PsiWhiteSpace(' ')
              NimMultiplyExpressionImpl(MULTIPLY_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('step')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.shr)('shr')
                PsiWhiteSpace(' ')
                NimLiteralImpl(LITERAL)
                  NimIntegerImpl(INTEGER)
                    NimSignedIntegerImpl(SIGNED_INTEGER)
                      PsiElement(NimTokenType.INT_LIT)('1\n    ')
            NimDedentationImpl(DEDENTATION)
              <empty list>
          NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
            NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
              NimIfExpressionImpl(IF_EXPRESSION)
                PsiElement(NimTokenType.if)('if')
                PsiWhiteSpace(' ')
                NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
                  NimCallExpressionImpl(CALL_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('cmp')
                    NimArgumentListImpl(ARGUMENT_LIST)
                      PsiElement(NimTokenType.()('(')
                      NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(NimTokenType.IDENTIFIER)('a')
                        PsiElement(NimTokenType.[)('[')
                        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(NimTokenType.IDENTIFIER)('result')
                        PsiElement(NimTokenType.])(']')
                      PsiElement(NimTokenType.,)(',')
                      PsiWhiteSpace(' ')
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('key')
                      PsiElement(NimTokenType.))(')')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.NOT_EQUAL)('!=')
                  PsiWhiteSpace(' ')
                  NimLiteralImpl(LITERAL)
                    NimIntegerImpl(INTEGER)
                      NimSignedIntegerImpl(SIGNED_INTEGER)
                        PsiElement(NimTokenType.INT_LIT)('0')
                PsiElement(NimTokenType.:)(':')
                PsiWhiteSpace(' ')
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('result')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimUnaryExpressionImpl(UNARY_EXPRESSION)
              NimUnaryOpImpl(UNARY_OP)
                PsiElement(NimTokenType.-)('-')
              NimLiteralImpl(LITERAL)
                NimIntegerImpl(INTEGER)
                  NimSignedIntegerImpl(SIGNED_INTEGER)
                    PsiElement(NimTokenType.INT_LIT)('1\n  ')
          NimDedentationImpl(DEDENTATION)
            <empty list>
        NimElseStatementImpl(ELSE_STATEMENT)
          PsiElement(NimTokenType.else)('else')
          PsiElement(NimTokenType.:)(':')
          NimIndentationImpl(INDENTATION)
            PsiElement(NimTokenType.INDENT)('\n    ')
          NimStatementImpl(STATEMENT)
            NimVarDeclarationImpl(VAR_DECLARATION)
              PsiElement(NimTokenType.var)('var')
              PsiWhiteSpace(' ')
              NimVarSpecImpl(VAR_SPEC)
                NimVarDefinitionImpl(VAR_DEFINITION)
                  PsiElement(NimTokenType.IDENTIFIER)('b')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.=)('=')
                PsiWhiteSpace(' ')
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('len')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          NimStatementImpl(STATEMENT)
            NimVarDeclarationImpl(VAR_DECLARATION)
              PsiElement(NimTokenType.var)('var')
              PsiWhiteSpace(' ')
              NimVarSpecImpl(VAR_SPEC)
                NimVarDefinitionImpl(VAR_DEFINITION)
                  PsiElement(NimTokenType.IDENTIFIER)('cmpRes')
                PsiElement(NimTokenType.:)(':')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.IDENTIFIER)('int')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          NimWhileStatementImpl(WHILE_STATEMENT)
            PsiElement(NimTokenType.while)('while')
            PsiWhiteSpace(' ')
            NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('result')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.<)('<')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('b')
            PsiElement(NimTokenType.:)(':')
            NimIndentationImpl(INDENTATION)
              PsiElement(NimTokenType.INDENT)('\n      ')
            NimStatementImpl(STATEMENT)
              NimVarDeclarationImpl(VAR_DECLARATION)
                PsiElement(NimTokenType.var)('var')
                PsiWhiteSpace(' ')
                NimVarSpecImpl(VAR_SPEC)
                  NimVarDefinitionImpl(VAR_DEFINITION)
                    PsiElement(NimTokenType.IDENTIFIER)('mid')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.=)('=')
                  PsiWhiteSpace(' ')
                  NimMultiplyExpressionImpl(MULTIPLY_EXPRESSION)
                    NimParanExpressionImpl(PARAN_EXPRESSION)
                      PsiElement(NimTokenType.()('(')
                      NimAddExpressionImpl(ADD_EXPRESSION)
                        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(NimTokenType.IDENTIFIER)('result')
                        PsiWhiteSpace(' ')
                        PsiElement(NimTokenType.+)('+')
                        PsiWhiteSpace(' ')
                        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(NimTokenType.IDENTIFIER)('b')
                      PsiElement(NimTokenType.))(')')
                    PsiWhiteSpace(' ')
                    PsiElement(NimTokenType.shr)('shr')
                    PsiWhiteSpace(' ')
                    NimLiteralImpl(LITERAL)
                      NimIntegerImpl(INTEGER)
                        NimSignedIntegerImpl(SIGNED_INTEGER)
                          PsiElement(NimTokenType.INT_LIT)('1')
            PsiWhiteSpace('\n')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('cmpRes')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.=)('=')
              PsiWhiteSpace(' ')
              NimCallExpressionImpl(CALL_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('cmp')
                NimArgumentListImpl(ARGUMENT_LIST)
                  PsiElement(NimTokenType.()('(')
                  NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('a')
                    PsiElement(NimTokenType.[)('[')
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('mid')
                    PsiElement(NimTokenType.])(']')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('key')
                  PsiElement(NimTokenType.))(')')
            PsiWhiteSpace('\n')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            NimIfBlockStatementImpl(IF_BLOCK_STATEMENT)
              PsiElement(NimTokenType.if)('if')
              PsiWhiteSpace(' ')
              NimConditionalBlockImpl(CONDITIONAL_BLOCK)
                NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('cmpRes')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.EQUALS)('==')
                  PsiWhiteSpace(' ')
                  NimLiteralImpl(LITERAL)
                    NimIntegerImpl(INTEGER)
                      NimSignedIntegerImpl(SIGNED_INTEGER)
                        PsiElement(NimTokenType.INT_LIT)('0')
                PsiElement(NimTokenType.:)(':')
                NimIndentationImpl(INDENTATION)
                  PsiElement(NimTokenType.INDENT)('\n        ')
                NimReturnStatementImpl(RETURN_STATEMENT)
                  PsiElement(NimTokenType.return)('return')
                  PsiWhiteSpace(' ')
                  NimSimpleStatementImpl(SIMPLE_STATEMENT)
                    NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('mid')
                PsiWhiteSpace('\n')
                PsiWhiteSpace('\n')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                NimDedentationImpl(DEDENTATION)
                  <empty list>
            NimIfBlockStatementImpl(IF_BLOCK_STATEMENT)
              PsiElement(NimTokenType.if)('if')
              PsiWhiteSpace(' ')
              NimConditionalBlockImpl(CONDITIONAL_BLOCK)
                NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('cmpRes')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.<)('<')
                  PsiWhiteSpace(' ')
                  NimLiteralImpl(LITERAL)
                    NimIntegerImpl(INTEGER)
                      NimSignedIntegerImpl(SIGNED_INTEGER)
                        PsiElement(NimTokenType.INT_LIT)('0')
                PsiElement(NimTokenType.:)(':')
                NimIndentationImpl(INDENTATION)
                  PsiElement(NimTokenType.INDENT)('\n        ')
                NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
                  NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('result')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.=)('=')
                  PsiWhiteSpace(' ')
                  NimAddExpressionImpl(ADD_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('mid')
                    PsiWhiteSpace(' ')
                    PsiElement(NimTokenType.+)('+')
                    PsiWhiteSpace(' ')
                    NimLiteralImpl(LITERAL)
                      NimIntegerImpl(INTEGER)
                        NimSignedIntegerImpl(SIGNED_INTEGER)
                          PsiElement(NimTokenType.INT_LIT)('1\n      ')
                NimDedentationImpl(DEDENTATION)
                  <empty list>
              NimElseStatementImpl(ELSE_STATEMENT)
                PsiElement(NimTokenType.else)('else')
                PsiElement(NimTokenType.:)(':')
                NimIndentationImpl(INDENTATION)
                  PsiElement(NimTokenType.INDENT)('\n        ')
                NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
                  NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('b')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.=)('=')
                  PsiWhiteSpace(' ')
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('mid\n    ')
                NimDedentationImpl(DEDENTATION)
                  <empty list>
            NimDedentationImpl(DEDENTATION)
              <empty list>
          NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
            NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
              NimIfExpressionImpl(IF_EXPRESSION)
                PsiElement(NimTokenType.if)('if')
                PsiWhiteSpace(' ')
                NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
                  NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('result')
                    PsiWhiteSpace(' ')
                    PsiElement(NimTokenType.GT_EQUAL)('>=')
                    PsiWhiteSpace(' ')
                    NimCallExpressionImpl(CALL_EXPRESSION)
                      NimOp7ExpressionImpl(OP_7_EXPRESSION)
                        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(NimTokenType.IDENTIFIER)('len')
                        PsiWhiteSpace(' ')
                        PsiElement(NimTokenType.or)('or')
                        PsiWhiteSpace(' ')
                        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(NimTokenType.IDENTIFIER)('cmp')
                      NimArgumentListImpl(ARGUMENT_LIST)
                        PsiElement(NimTokenType.()('(')
                        NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(NimTokenType.IDENTIFIER)('a')
                          PsiElement(NimTokenType.[)('[')
                          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(NimTokenType.IDENTIFIER)('result')
                          PsiElement(NimTokenType.])(']')
                        PsiElement(NimTokenType.,)(',')
                        PsiWhiteSpace(' ')
                        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(NimTokenType.IDENTIFIER)('key')
                        PsiElement(NimTokenType.))(')')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.NOT_EQUAL)('!=')
                  PsiWhiteSpace(' ')
                  NimLiteralImpl(LITERAL)
                    NimIntegerImpl(INTEGER)
                      NimSignedIntegerImpl(SIGNED_INTEGER)
                        PsiElement(NimTokenType.INT_LIT)('0')
                PsiElement(NimTokenType.:)(':')
                PsiWhiteSpace(' ')
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('result')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimUnaryExpressionImpl(UNARY_EXPRESSION)
              NimUnaryOpImpl(UNARY_OP)
                PsiElement(NimTokenType.-)('-')
              NimLiteralImpl(LITERAL)
                NimIntegerImpl(INTEGER)
                  NimSignedIntegerImpl(SIGNED_INTEGER)
                    PsiElement(NimTokenType.INT_LIT)('1')
          PsiWhiteSpace('\n')
          PsiWhiteSpace('\n')
          NimDedentationImpl(DEDENTATION)
            <empty list>
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('binarySearch')
      PsiElement(NimTokenType.*)('*')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('key')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.))(')')
      NimReturnTypeImpl(RETURN_TYPE)
        PsiElement(NimTokenType.:)(':')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.IDENTIFIER)('int')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## Binary search for ``key`` in ``a``. Returns -1 if not found.')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimSimpleStatementImpl(SIMPLE_STATEMENT)
        NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
          NimCallExpressionImpl(CALL_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('binarySearch')
            NimArgumentListImpl(ARGUMENT_LIST)
              PsiElement(NimTokenType.()('(')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('a')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('key')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('cmp')
                PsiElement(NimTokenType.[)('[')
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('T')
                PsiElement(NimTokenType.])(']')
              PsiElement(NimTokenType.))(')')
      PsiWhiteSpace('\n')
      PsiWhiteSpace('\n')
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('smartBinarySearch')
      PsiElement(NimTokenType.*)('*')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('key')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.))(')')
      NimReturnTypeImpl(RETURN_TYPE)
        PsiElement(NimTokenType.:)(':')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.IDENTIFIER)('int')
      PsiWhiteSpace(' ')
      NimPragmaImpl(PRAGMA)
        PsiElement(NimTokenType.{.)('{.')
        PsiElement(NimTokenType.IDENTIFIER)('deprecated')
        PsiElement(NimTokenType..})('.}')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## **Deprecated since version 0.18.1**; Use ``binarySearch`` instead.')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimSimpleStatementImpl(SIMPLE_STATEMENT)
        NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
          NimCallExpressionImpl(CALL_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('binarySearch')
            NimArgumentListImpl(ARGUMENT_LIST)
              PsiElement(NimTokenType.()('(')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('a')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('key')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('cmp')
                PsiElement(NimTokenType.[)('[')
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('T')
                PsiElement(NimTokenType.])(']')
              PsiElement(NimTokenType.))(')')
      PsiWhiteSpace('\n')
      PsiWhiteSpace('\n')
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimStatementImpl(STATEMENT)
    NimVarDeclarationImpl(VAR_DECLARATION)
      PsiElement(NimTokenType.CONST)('const')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimVarSpecImpl(VAR_SPEC)
        NimVarDefinitionImpl(VAR_DEFINITION)
          PsiElement(NimTokenType.IDENTIFIER)('onlySafeCode')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.=)('=')
        PsiWhiteSpace(' ')
        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
          PsiElement(NimTokenType.IDENTIFIER)('true')
      PsiWhiteSpace('\n')
      PsiWhiteSpace('\n')
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('lowerBound')
      PsiElement(NimTokenType.*)('*')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        NimGenericsAdditionalImpl(GENERICS_ADDITIONAL)
          PsiElement(NimTokenType.,)(',')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('K')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('key')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('K')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('cmp')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          NimClosureImpl(CLOSURE)
            PsiElement(NimTokenType.proc)('proc')
            NimParametersImpl(PARAMETERS)
              PsiElement(NimTokenType.()('(')
              NimParameterImpl(PARAMETER)
                NimParamterNamesImpl(PARAMTER_NAMES)
                  PsiElement(NimTokenType.IDENTIFIER)('x')
                PsiElement(NimTokenType.:)(':')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.IDENTIFIER)('T')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimParameterImpl(PARAMETER)
                NimParamterNamesImpl(PARAMTER_NAMES)
                  PsiElement(NimTokenType.IDENTIFIER)('k')
                PsiElement(NimTokenType.:)(':')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.IDENTIFIER)('K')
              PsiElement(NimTokenType.))(')')
            NimReturnTypeImpl(RETURN_TYPE)
              PsiElement(NimTokenType.:)(':')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.IDENTIFIER)('int')
            PsiWhiteSpace(' ')
            NimPragmaImpl(PRAGMA)
              PsiElement(NimTokenType.{.)('{.')
              PsiElement(NimTokenType.IDENTIFIER)('closure')
              PsiElement(NimTokenType..})('.}')
        PsiElement(NimTokenType.))(')')
      NimReturnTypeImpl(RETURN_TYPE)
        PsiElement(NimTokenType.:)(':')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.IDENTIFIER)('int')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## returns a position to the first element in the ``a`` that is greater than')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## ``key``, or last if no such element is found.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## In other words if you have a sorted sequence and you call')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## ``insert(thing, elm, lowerBound(thing, elm))``')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## the sequence will still be sorted.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## The first version uses ``cmp`` to compare the elements.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## The expected return values are the same as that of ``system.cmp``.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## The second version uses the default comparison function ``cmp``.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## .. code-block:: nim')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##   var arr = @[1,2,3,5,6,7,8,9]')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##   arr.insert(4, arr.lowerBound(4))')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##   # after running the above arr is `[1,2,3,4,5,6,7,8,9]`')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
        NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('result')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.=)('=')
        PsiWhiteSpace(' ')
        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType..)('.')
          PsiElement(NimTokenType.IDENTIFIER)('low')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimStatementImpl(STATEMENT)
        NimVarDeclarationImpl(VAR_DECLARATION)
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          NimVarSpecImpl(VAR_SPEC)
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('count')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimAddExpressionImpl(ADD_EXPRESSION)
              NimAddExpressionImpl(ADD_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('a')
                  PsiElement(NimTokenType..)('.')
                  PsiElement(NimTokenType.IDENTIFIER)('high')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.-)('-')
                PsiWhiteSpace(' ')
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('a')
                  PsiElement(NimTokenType..)('.')
                  PsiElement(NimTokenType.IDENTIFIER)('low')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.+)('+')
              PsiWhiteSpace(' ')
              NimLiteralImpl(LITERAL)
                NimIntegerImpl(INTEGER)
                  NimSignedIntegerImpl(SIGNED_INTEGER)
                    PsiElement(NimTokenType.INT_LIT)('1')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimStatementImpl(STATEMENT)
        NimVarDeclarationImpl(VAR_DECLARATION)
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          NimVarSpecImpl(VAR_SPEC)
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('step')
            PsiElement(NimTokenType.,)(',')
            PsiWhiteSpace(' ')
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('pos')
            PsiElement(NimTokenType.:)(':')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.IDENTIFIER)('int')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimWhileStatementImpl(WHILE_STATEMENT)
        PsiElement(NimTokenType.while)('while')
        PsiWhiteSpace(' ')
        NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('count')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.NOT_EQUAL)('!=')
          PsiWhiteSpace(' ')
          NimLiteralImpl(LITERAL)
            NimIntegerImpl(INTEGER)
              NimSignedIntegerImpl(SIGNED_INTEGER)
                PsiElement(NimTokenType.INT_LIT)('0')
        PsiElement(NimTokenType.:)(':')
        NimIndentationImpl(INDENTATION)
          PsiElement(NimTokenType.INDENT)('\n    ')
        NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
          NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('step')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.=)('=')
          PsiWhiteSpace(' ')
          NimMultiplyExpressionImpl(MULTIPLY_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('count')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.shr)('shr')
            PsiWhiteSpace(' ')
            NimLiteralImpl(LITERAL)
              NimIntegerImpl(INTEGER)
                NimSignedIntegerImpl(SIGNED_INTEGER)
                  PsiElement(NimTokenType.INT_LIT)('1')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
          NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('pos')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.=)('=')
          PsiWhiteSpace(' ')
          NimAddExpressionImpl(ADD_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('result')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.+)('+')
            PsiWhiteSpace(' ')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('step')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        NimIfBlockStatementImpl(IF_BLOCK_STATEMENT)
          PsiElement(NimTokenType.if)('if')
          PsiWhiteSpace(' ')
          NimConditionalBlockImpl(CONDITIONAL_BLOCK)
            NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
              NimCallExpressionImpl(CALL_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('cmp')
                NimArgumentListImpl(ARGUMENT_LIST)
                  PsiElement(NimTokenType.()('(')
                  NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('a')
                    PsiElement(NimTokenType.[)('[')
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('pos')
                    PsiElement(NimTokenType.])(']')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('key')
                  PsiElement(NimTokenType.))(')')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.<)('<')
              PsiWhiteSpace(' ')
              NimLiteralImpl(LITERAL)
                NimIntegerImpl(INTEGER)
                  NimSignedIntegerImpl(SIGNED_INTEGER)
                    PsiElement(NimTokenType.INT_LIT)('0')
            PsiElement(NimTokenType.:)(':')
            NimIndentationImpl(INDENTATION)
              PsiElement(NimTokenType.INDENT)('\n      ')
            NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('result')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.=)('=')
              PsiWhiteSpace(' ')
              NimAddExpressionImpl(ADD_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('pos')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.+)('+')
                PsiWhiteSpace(' ')
                NimLiteralImpl(LITERAL)
                  NimIntegerImpl(INTEGER)
                    NimSignedIntegerImpl(SIGNED_INTEGER)
                      PsiElement(NimTokenType.INT_LIT)('1')
            PsiWhiteSpace('\n')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimAddExpressionImpl(ADD_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('count')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.-)('-')
                  PsiErrorElement:<expression> expected, got '='
                    <empty list>
              PsiElement(NimTokenType.=)('=')
              PsiWhiteSpace(' ')
              NimAddExpressionImpl(ADD_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('step')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.+)('+')
                PsiWhiteSpace(' ')
                NimLiteralImpl(LITERAL)
                  NimIntegerImpl(INTEGER)
                    NimSignedIntegerImpl(SIGNED_INTEGER)
                      PsiElement(NimTokenType.INT_LIT)('1\n    ')
            NimDedentationImpl(DEDENTATION)
              <empty list>
          NimElseStatementImpl(ELSE_STATEMENT)
            PsiElement(NimTokenType.else)('else')
            PsiElement(NimTokenType.:)(':')
            NimIndentationImpl(INDENTATION)
              PsiElement(NimTokenType.INDENT)('\n      ')
            NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('count')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.=)('=')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('step')
            PsiWhiteSpace('\n')
            PsiWhiteSpace('\n')
            NimDedentationImpl(DEDENTATION)
              <empty list>
        NimDedentationImpl(DEDENTATION)
          <empty list>
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('lowerBound')
      PsiElement(NimTokenType.*)('*')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('key')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.))(')')
      NimReturnTypeImpl(RETURN_TYPE)
        PsiElement(NimTokenType.:)(':')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.IDENTIFIER)('int')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace(' ')
      NimCallExpressionImpl(CALL_EXPRESSION)
        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
          PsiElement(NimTokenType.IDENTIFIER)('lowerBound')
        NimArgumentListImpl(ARGUMENT_LIST)
          PsiElement(NimTokenType.()('(')
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.,)(',')
          PsiWhiteSpace(' ')
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('key')
          PsiElement(NimTokenType.,)(',')
          PsiWhiteSpace(' ')
          NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('cmp')
            PsiElement(NimTokenType.[)('[')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
          PsiElement(NimTokenType.))(')')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('upperBound')
      PsiElement(NimTokenType.*)('*')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        NimGenericsAdditionalImpl(GENERICS_ADDITIONAL)
          PsiElement(NimTokenType.,)(',')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('K')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('key')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('K')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('cmp')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          NimClosureImpl(CLOSURE)
            PsiElement(NimTokenType.proc)('proc')
            NimParametersImpl(PARAMETERS)
              PsiElement(NimTokenType.()('(')
              NimParameterImpl(PARAMETER)
                NimParamterNamesImpl(PARAMTER_NAMES)
                  PsiElement(NimTokenType.IDENTIFIER)('x')
                PsiElement(NimTokenType.:)(':')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.IDENTIFIER)('T')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimParameterImpl(PARAMETER)
                NimParamterNamesImpl(PARAMTER_NAMES)
                  PsiElement(NimTokenType.IDENTIFIER)('k')
                PsiElement(NimTokenType.:)(':')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.IDENTIFIER)('K')
              PsiElement(NimTokenType.))(')')
            NimReturnTypeImpl(RETURN_TYPE)
              PsiElement(NimTokenType.:)(':')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.IDENTIFIER)('int')
            PsiWhiteSpace(' ')
            NimPragmaImpl(PRAGMA)
              PsiElement(NimTokenType.{.)('{.')
              PsiElement(NimTokenType.IDENTIFIER)('closure')
              PsiElement(NimTokenType..})('.}')
        PsiElement(NimTokenType.))(')')
      NimReturnTypeImpl(RETURN_TYPE)
        PsiElement(NimTokenType.:)(':')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.IDENTIFIER)('int')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## returns a position to the first element in the ``a`` that is not less')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## (i.e. greater or equal to) than ``key``, or last if no such element is found.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## In other words if you have a sorted sequence and you call')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## ``insert(thing, elm, upperBound(thing, elm))``')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## the sequence will still be sorted.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## The first version uses ``cmp`` to compare the elements. The expected')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## return values are the same as that of ``system.cmp``.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## The second version uses the default comparison function ``cmp``.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## .. code-block:: nim')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##   var arr = @[1,2,3,4,6,7,8,9]')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##   arr.insert(5, arr.upperBound(4))')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##   # after running the above arr is `[1,2,3,4,5,6,7,8,9]`')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
        NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('result')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.=)('=')
        PsiWhiteSpace(' ')
        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType..)('.')
          PsiElement(NimTokenType.IDENTIFIER)('low')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimStatementImpl(STATEMENT)
        NimVarDeclarationImpl(VAR_DECLARATION)
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          NimVarSpecImpl(VAR_SPEC)
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('count')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimAddExpressionImpl(ADD_EXPRESSION)
              NimAddExpressionImpl(ADD_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('a')
                  PsiElement(NimTokenType..)('.')
                  PsiElement(NimTokenType.IDENTIFIER)('high')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.-)('-')
                PsiWhiteSpace(' ')
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('a')
                  PsiElement(NimTokenType..)('.')
                  PsiElement(NimTokenType.IDENTIFIER)('low')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.+)('+')
              PsiWhiteSpace(' ')
              NimLiteralImpl(LITERAL)
                NimIntegerImpl(INTEGER)
                  NimSignedIntegerImpl(SIGNED_INTEGER)
                    PsiElement(NimTokenType.INT_LIT)('1')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimStatementImpl(STATEMENT)
        NimVarDeclarationImpl(VAR_DECLARATION)
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          NimVarSpecImpl(VAR_SPEC)
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('step')
            PsiElement(NimTokenType.,)(',')
            PsiWhiteSpace(' ')
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('pos')
            PsiElement(NimTokenType.:)(':')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.IDENTIFIER)('int')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimWhileStatementImpl(WHILE_STATEMENT)
        PsiElement(NimTokenType.while)('while')
        PsiWhiteSpace(' ')
        NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('count')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.NOT_EQUAL)('!=')
          PsiWhiteSpace(' ')
          NimLiteralImpl(LITERAL)
            NimIntegerImpl(INTEGER)
              NimSignedIntegerImpl(SIGNED_INTEGER)
                PsiElement(NimTokenType.INT_LIT)('0')
        PsiElement(NimTokenType.:)(':')
        NimIndentationImpl(INDENTATION)
          PsiElement(NimTokenType.INDENT)('\n    ')
        NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
          NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('step')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.=)('=')
          PsiWhiteSpace(' ')
          NimMultiplyExpressionImpl(MULTIPLY_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('count')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.shr)('shr')
            PsiWhiteSpace(' ')
            NimLiteralImpl(LITERAL)
              NimIntegerImpl(INTEGER)
                NimSignedIntegerImpl(SIGNED_INTEGER)
                  PsiElement(NimTokenType.INT_LIT)('1')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
          NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('pos')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.=)('=')
          PsiWhiteSpace(' ')
          NimAddExpressionImpl(ADD_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('result')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.+)('+')
            PsiWhiteSpace(' ')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('step')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        NimIfBlockStatementImpl(IF_BLOCK_STATEMENT)
          PsiElement(NimTokenType.if)('if')
          PsiWhiteSpace(' ')
          NimConditionalBlockImpl(CONDITIONAL_BLOCK)
            NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
              NimCallExpressionImpl(CALL_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('cmp')
                NimArgumentListImpl(ARGUMENT_LIST)
                  PsiElement(NimTokenType.()('(')
                  NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('a')
                    PsiElement(NimTokenType.[)('[')
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('pos')
                    PsiElement(NimTokenType.])(']')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('key')
                  PsiElement(NimTokenType.))(')')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.LT_EQUAL)('<=')
              PsiWhiteSpace(' ')
              NimLiteralImpl(LITERAL)
                NimIntegerImpl(INTEGER)
                  NimSignedIntegerImpl(SIGNED_INTEGER)
                    PsiElement(NimTokenType.INT_LIT)('0')
            PsiElement(NimTokenType.:)(':')
            NimIndentationImpl(INDENTATION)
              PsiElement(NimTokenType.INDENT)('\n      ')
            NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('result')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.=)('=')
              PsiWhiteSpace(' ')
              NimAddExpressionImpl(ADD_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('pos')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.+)('+')
                PsiWhiteSpace(' ')
                NimLiteralImpl(LITERAL)
                  NimIntegerImpl(INTEGER)
                    NimSignedIntegerImpl(SIGNED_INTEGER)
                      PsiElement(NimTokenType.INT_LIT)('1')
            PsiWhiteSpace('\n')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimAddExpressionImpl(ADD_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('count')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.-)('-')
                  PsiErrorElement:<expression> expected, got '='
                    <empty list>
              PsiElement(NimTokenType.=)('=')
              PsiWhiteSpace(' ')
              NimAddExpressionImpl(ADD_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('step')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.+)('+')
                PsiWhiteSpace(' ')
                NimLiteralImpl(LITERAL)
                  NimIntegerImpl(INTEGER)
                    NimSignedIntegerImpl(SIGNED_INTEGER)
                      PsiElement(NimTokenType.INT_LIT)('1\n    ')
            NimDedentationImpl(DEDENTATION)
              <empty list>
          NimElseStatementImpl(ELSE_STATEMENT)
            PsiElement(NimTokenType.else)('else')
            PsiElement(NimTokenType.:)(':')
            NimIndentationImpl(INDENTATION)
              PsiElement(NimTokenType.INDENT)('\n      ')
            NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('count')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.=)('=')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('step')
            PsiWhiteSpace('\n')
            PsiWhiteSpace('\n')
            NimDedentationImpl(DEDENTATION)
              <empty list>
        NimDedentationImpl(DEDENTATION)
          <empty list>
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('upperBound')
      PsiElement(NimTokenType.*)('*')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('key')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.))(')')
      NimReturnTypeImpl(RETURN_TYPE)
        PsiElement(NimTokenType.:)(':')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.IDENTIFIER)('int')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace(' ')
      NimCallExpressionImpl(CALL_EXPRESSION)
        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
          PsiElement(NimTokenType.IDENTIFIER)('upperBound')
        NimArgumentListImpl(ARGUMENT_LIST)
          PsiElement(NimTokenType.()('(')
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.,)(',')
          PsiWhiteSpace(' ')
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('key')
          PsiElement(NimTokenType.,)(',')
          PsiWhiteSpace(' ')
          NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('cmp')
            PsiElement(NimTokenType.[)('[')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
          PsiElement(NimTokenType.))(')')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimTemplateMethodImpl(TEMPLATE_METHOD)
      PsiElement(NimTokenType.template)('template')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.`)('`')
      PsiElement(NimTokenType.BACK_TICK_IDENTIFIER)('<-')
      PsiElement(NimTokenType.`)('`')
      PsiWhiteSpace(' ')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
            PsiElement(NimTokenType.,)(',')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.IDENTIFIER)('b')
        PsiElement(NimTokenType.))(')')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimIfBlockStatementImpl(IF_BLOCK_STATEMENT)
        PsiElement(NimTokenType.when)('when')
        PsiWhiteSpace(' ')
        NimConditionalBlockImpl(CONDITIONAL_BLOCK)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('false')
          PsiElement(NimTokenType.:)(':')
          NimIndentationImpl(INDENTATION)
            PsiElement(NimTokenType.INDENT)('\n    ')
          NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
            NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('a')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('b\n  ')
          NimDedentationImpl(DEDENTATION)
            <empty list>
        NimElseIfStatementImpl(ELSE_IF_STATEMENT)
          PsiElement(NimTokenType.elif)('elif')
          PsiWhiteSpace(' ')
          NimConditionalBlockImpl(CONDITIONAL_BLOCK)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('onlySafeCode')
            PsiElement(NimTokenType.:)(':')
            NimIndentationImpl(INDENTATION)
              PsiElement(NimTokenType.INDENT)('\n    ')
            NimSimpleStatementImpl(SIMPLE_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimCallExpressionImpl(CALL_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('shallowCopy')
                  NimArgumentListImpl(ARGUMENT_LIST)
                    PsiElement(NimTokenType.()('(')
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('a')
                    PsiElement(NimTokenType.,)(',')
                    PsiWhiteSpace(' ')
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('b')
                    PsiElement(NimTokenType.))(')\n  ')
            NimDedentationImpl(DEDENTATION)
              <empty list>
        NimElseStatementImpl(ELSE_STATEMENT)
          PsiElement(NimTokenType.else)('else')
          PsiElement(NimTokenType.:)(':')
          NimIndentationImpl(INDENTATION)
            PsiElement(NimTokenType.INDENT)('\n    ')
          NimSimpleStatementImpl(SIMPLE_STATEMENT)
            NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
              NimCallExpressionImpl(CALL_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('copyMem')
                NimArgumentListImpl(ARGUMENT_LIST)
                  PsiElement(NimTokenType.()('(')
                  NimCallExpressionImpl(CALL_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('addr')
                    NimArgumentListImpl(ARGUMENT_LIST)
                      PsiElement(NimTokenType.()('(')
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('a')
                      PsiElement(NimTokenType.))(')')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  NimCallExpressionImpl(CALL_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('addr')
                    NimArgumentListImpl(ARGUMENT_LIST)
                      PsiElement(NimTokenType.()('(')
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('b')
                      PsiElement(NimTokenType.))(')')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  NimCallExpressionImpl(CALL_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('sizeof')
                    NimArgumentListImpl(ARGUMENT_LIST)
                      PsiElement(NimTokenType.()('(')
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('T')
                      PsiElement(NimTokenType.))(')')
                  PsiElement(NimTokenType.))(')')
          PsiWhiteSpace('\n')
          PsiWhiteSpace('\n')
          NimDedentationImpl(DEDENTATION)
            <empty list>
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('merge')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
            PsiElement(NimTokenType.,)(',')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.IDENTIFIER)('b')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('lo')
            PsiElement(NimTokenType.,)(',')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.IDENTIFIER)('m')
            PsiElement(NimTokenType.,)(',')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.IDENTIFIER)('hi')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('int')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('cmp')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          NimClosureImpl(CLOSURE)
            PsiElement(NimTokenType.proc)('proc')
            PsiWhiteSpace(' ')
            NimParametersImpl(PARAMETERS)
              PsiElement(NimTokenType.()('(')
              NimParameterImpl(PARAMETER)
                NimParamterNamesImpl(PARAMTER_NAMES)
                  PsiElement(NimTokenType.IDENTIFIER)('x')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.IDENTIFIER)('y')
                PsiElement(NimTokenType.:)(':')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.IDENTIFIER)('T')
              PsiElement(NimTokenType.))(')')
            NimReturnTypeImpl(RETURN_TYPE)
              PsiElement(NimTokenType.:)(':')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.IDENTIFIER)('int')
            PsiWhiteSpace(' ')
            NimPragmaImpl(PRAGMA)
              PsiElement(NimTokenType.{.)('{.')
              PsiElement(NimTokenType.IDENTIFIER)('closure')
              PsiElement(NimTokenType..})('.}')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('order')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('SortOrder')
        PsiElement(NimTokenType.))(')')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('# optimization: If max(left) <= min(right) there is nothing to do!')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('# 1 2 3 4  ## 5 6 7 8')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('# -> O(n) for sorted arrays.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('# On random data this safes up to 40% of merge calls')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimSimpleStatementImpl(SIMPLE_STATEMENT)
        NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
          NimIfExpressionImpl(IF_EXPRESSION)
            PsiElement(NimTokenType.if)('if')
            PsiWhiteSpace(' ')
            NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
              NimMultiplyExpressionImpl(MULTIPLY_EXPRESSION)
                NimCallExpressionImpl(CALL_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('cmp')
                  NimArgumentListImpl(ARGUMENT_LIST)
                    PsiElement(NimTokenType.()('(')
                    NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('a')
                      PsiElement(NimTokenType.[)('[')
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('m')
                      PsiElement(NimTokenType.])(']')
                    PsiElement(NimTokenType.,)(',')
                    PsiWhiteSpace(' ')
                    NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('a')
                      PsiElement(NimTokenType.[)('[')
                      NimAddExpressionImpl(ADD_EXPRESSION)
                        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(NimTokenType.IDENTIFIER)('m')
                        PsiElement(NimTokenType.+)('+')
                        NimLiteralImpl(LITERAL)
                          NimIntegerImpl(INTEGER)
                            NimSignedIntegerImpl(SIGNED_INTEGER)
                              PsiElement(NimTokenType.INT_LIT)('1')
                      PsiElement(NimTokenType.])(']')
                    PsiElement(NimTokenType.))(')')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.*)('*')
                PsiWhiteSpace(' ')
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('order')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.LT_EQUAL)('<=')
              PsiWhiteSpace(' ')
              NimLiteralImpl(LITERAL)
                NimIntegerImpl(INTEGER)
                  NimSignedIntegerImpl(SIGNED_INTEGER)
                    PsiElement(NimTokenType.INT_LIT)('0')
            PsiElement(NimTokenType.:)(':')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.return)('return')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimStatementImpl(STATEMENT)
        NimVarDeclarationImpl(VAR_DECLARATION)
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          NimVarSpecImpl(VAR_SPEC)
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('j')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('lo')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('# copy a[j..m] into b:')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimSimpleStatementImpl(SIMPLE_STATEMENT)
        NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('assert')
        PsiWhiteSpace(' ')
        NimSimpleStatementImpl(SIMPLE_STATEMENT)
          NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
            NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('j')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.LT_EQUAL)('<=')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('m')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimIfBlockStatementImpl(IF_BLOCK_STATEMENT)
        PsiElement(NimTokenType.when)('when')
        PsiWhiteSpace(' ')
        NimConditionalBlockImpl(CONDITIONAL_BLOCK)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('onlySafeCode')
          PsiElement(NimTokenType.:)(':')
          NimIndentationImpl(INDENTATION)
            PsiElement(NimTokenType.INDENT)('\n    ')
          NimStatementImpl(STATEMENT)
            NimVarDeclarationImpl(VAR_DECLARATION)
              PsiElement(NimTokenType.var)('var')
              PsiWhiteSpace(' ')
              NimVarSpecImpl(VAR_SPEC)
                NimVarDefinitionImpl(VAR_DEFINITION)
                  PsiElement(NimTokenType.IDENTIFIER)('bb')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.=)('=')
                PsiWhiteSpace(' ')
                NimLiteralImpl(LITERAL)
                  NimIntegerImpl(INTEGER)
                    NimSignedIntegerImpl(SIGNED_INTEGER)
                      PsiElement(NimTokenType.INT_LIT)('0')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          NimWhileStatementImpl(WHILE_STATEMENT)
            PsiElement(NimTokenType.while)('while')
            PsiWhiteSpace(' ')
            NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('j')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.LT_EQUAL)('<=')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('m')
            PsiElement(NimTokenType.:)(':')
            NimIndentationImpl(INDENTATION)
              PsiElement(NimTokenType.INDENT)('\n      ')
            NimSimpleStatementImpl(SIMPLE_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
                  NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('b')
                    PsiElement(NimTokenType.[)('[')
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('bb')
                    PsiElement(NimTokenType.])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.<)('<')
                  NimUnaryExpressionImpl(UNARY_EXPRESSION)
                    NimUnaryOpImpl(UNARY_OP)
                      PsiElement(NimTokenType.-)('-')
                    PsiWhiteSpace(' ')
                    NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('a')
                      PsiElement(NimTokenType.[)('[')
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('j')
                      PsiElement(NimTokenType.])(']')
              PsiWhiteSpace('\n')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              NimSimpleStatementImpl(SIMPLE_STATEMENT)
                NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                  NimCallExpressionImpl(CALL_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('inc')
                    NimArgumentListImpl(ARGUMENT_LIST)
                      PsiElement(NimTokenType.()('(')
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('bb')
                      PsiElement(NimTokenType.))(')')
                PsiWhiteSpace('\n')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                NimSimpleStatementImpl(SIMPLE_STATEMENT)
                  NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                    NimCallExpressionImpl(CALL_EXPRESSION)
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('inc')
                      NimArgumentListImpl(ARGUMENT_LIST)
                        PsiElement(NimTokenType.()('(')
                        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(NimTokenType.IDENTIFIER)('j')
                        PsiElement(NimTokenType.))(')\n  ')
            NimDedentationImpl(DEDENTATION)
              <empty list>
          NimDedentationImpl(DEDENTATION)
            <empty list>
        NimElseStatementImpl(ELSE_STATEMENT)
          PsiElement(NimTokenType.else)('else')
          PsiElement(NimTokenType.:)(':')
          NimIndentationImpl(INDENTATION)
            PsiElement(NimTokenType.INDENT)('\n    ')
          NimSimpleStatementImpl(SIMPLE_STATEMENT)
            NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
              NimCallExpressionImpl(CALL_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('copyMem')
                NimArgumentListImpl(ARGUMENT_LIST)
                  PsiElement(NimTokenType.()('(')
                  NimCallExpressionImpl(CALL_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('addr')
                    NimArgumentListImpl(ARGUMENT_LIST)
                      PsiElement(NimTokenType.()('(')
                      NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(NimTokenType.IDENTIFIER)('b')
                        PsiElement(NimTokenType.[)('[')
                        NimLiteralImpl(LITERAL)
                          NimIntegerImpl(INTEGER)
                            NimSignedIntegerImpl(SIGNED_INTEGER)
                              PsiElement(NimTokenType.INT_LIT)('0')
                        PsiElement(NimTokenType.])(']')
                      PsiElement(NimTokenType.))(')')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  NimCallExpressionImpl(CALL_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('addr')
                    NimArgumentListImpl(ARGUMENT_LIST)
                      PsiElement(NimTokenType.()('(')
                      NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(NimTokenType.IDENTIFIER)('a')
                        PsiElement(NimTokenType.[)('[')
                        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(NimTokenType.IDENTIFIER)('j')
                        PsiElement(NimTokenType.])(']')
                      PsiElement(NimTokenType.))(')')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  NimMultiplyExpressionImpl(MULTIPLY_EXPRESSION)
                    NimCallExpressionImpl(CALL_EXPRESSION)
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('sizeof')
                      NimArgumentListImpl(ARGUMENT_LIST)
                        PsiElement(NimTokenType.()('(')
                        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(NimTokenType.IDENTIFIER)('T')
                        PsiElement(NimTokenType.))(')')
                    PsiElement(NimTokenType.*)('*')
                    NimParanExpressionImpl(PARAN_EXPRESSION)
                      PsiElement(NimTokenType.()('(')
                      NimAddExpressionImpl(ADD_EXPRESSION)
                        NimAddExpressionImpl(ADD_EXPRESSION)
                          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(NimTokenType.IDENTIFIER)('m')
                          PsiElement(NimTokenType.-)('-')
                          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(NimTokenType.IDENTIFIER)('j')
                        PsiElement(NimTokenType.+)('+')
                        NimLiteralImpl(LITERAL)
                          NimIntegerImpl(INTEGER)
                            NimSignedIntegerImpl(SIGNED_INTEGER)
                              PsiElement(NimTokenType.INT_LIT)('1')
                      PsiElement(NimTokenType.))(')')
                  PsiElement(NimTokenType.))(')')
            PsiWhiteSpace('\n')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('j')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.=)('=')
              PsiWhiteSpace(' ')
              NimAddExpressionImpl(ADD_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('m')
                PsiElement(NimTokenType.+)('+')
                NimLiteralImpl(LITERAL)
                  NimIntegerImpl(INTEGER)
                    NimSignedIntegerImpl(SIGNED_INTEGER)
                      PsiElement(NimTokenType.INT_LIT)('1\n  ')
          NimDedentationImpl(DEDENTATION)
            <empty list>
      NimStatementImpl(STATEMENT)
        NimVarDeclarationImpl(VAR_DECLARATION)
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          NimVarSpecImpl(VAR_SPEC)
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('i')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimLiteralImpl(LITERAL)
              NimIntegerImpl(INTEGER)
                NimSignedIntegerImpl(SIGNED_INTEGER)
                  PsiElement(NimTokenType.INT_LIT)('0')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimStatementImpl(STATEMENT)
        NimVarDeclarationImpl(VAR_DECLARATION)
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          NimVarSpecImpl(VAR_SPEC)
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('k')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('lo')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('# copy proper element back:')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimWhileStatementImpl(WHILE_STATEMENT)
        PsiElement(NimTokenType.while)('while')
        PsiWhiteSpace(' ')
        NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
          NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('k')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.<)('<')
            PsiWhiteSpace(' ')
            NimOp7ExpressionImpl(OP_7_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('j')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.and)('and')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('j')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.LT_EQUAL)('<=')
          PsiWhiteSpace(' ')
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('hi')
        PsiElement(NimTokenType.:)(':')
        NimIndentationImpl(INDENTATION)
          PsiElement(NimTokenType.INDENT)('\n    ')
        NimIfBlockStatementImpl(IF_BLOCK_STATEMENT)
          PsiElement(NimTokenType.if)('if')
          PsiWhiteSpace(' ')
          NimConditionalBlockImpl(CONDITIONAL_BLOCK)
            NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
              NimMultiplyExpressionImpl(MULTIPLY_EXPRESSION)
                NimCallExpressionImpl(CALL_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('cmp')
                  NimArgumentListImpl(ARGUMENT_LIST)
                    PsiElement(NimTokenType.()('(')
                    NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('b')
                      PsiElement(NimTokenType.[)('[')
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('i')
                      PsiElement(NimTokenType.])(']')
                    PsiElement(NimTokenType.,)(',')
                    PsiWhiteSpace(' ')
                    NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('a')
                      PsiElement(NimTokenType.[)('[')
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('j')
                      PsiElement(NimTokenType.])(']')
                    PsiElement(NimTokenType.))(')')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.*)('*')
                PsiWhiteSpace(' ')
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('order')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.LT_EQUAL)('<=')
              PsiWhiteSpace(' ')
              NimLiteralImpl(LITERAL)
                NimIntegerImpl(INTEGER)
                  NimSignedIntegerImpl(SIGNED_INTEGER)
                    PsiElement(NimTokenType.INT_LIT)('0')
            PsiElement(NimTokenType.:)(':')
            NimIndentationImpl(INDENTATION)
              PsiElement(NimTokenType.INDENT)('\n      ')
            NimSimpleStatementImpl(SIMPLE_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
                  NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('a')
                    PsiElement(NimTokenType.[)('[')
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('k')
                    PsiElement(NimTokenType.])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.<)('<')
                  NimUnaryExpressionImpl(UNARY_EXPRESSION)
                    NimUnaryOpImpl(UNARY_OP)
                      PsiElement(NimTokenType.-)('-')
                    PsiWhiteSpace(' ')
                    NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('b')
                      PsiElement(NimTokenType.[)('[')
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('i')
                      PsiElement(NimTokenType.])(']')
              PsiWhiteSpace('\n')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              NimSimpleStatementImpl(SIMPLE_STATEMENT)
                NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                  NimCallExpressionImpl(CALL_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('inc')
                    NimArgumentListImpl(ARGUMENT_LIST)
                      PsiElement(NimTokenType.()('(')
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('i')
                      PsiElement(NimTokenType.))(')\n    ')
            NimDedentationImpl(DEDENTATION)
              <empty list>
          NimElseStatementImpl(ELSE_STATEMENT)
            PsiElement(NimTokenType.else)('else')
            PsiElement(NimTokenType.:)(':')
            NimIndentationImpl(INDENTATION)
              PsiElement(NimTokenType.INDENT)('\n      ')
            NimSimpleStatementImpl(SIMPLE_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
                  NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('a')
                    PsiElement(NimTokenType.[)('[')
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('k')
                    PsiElement(NimTokenType.])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.<)('<')
                  NimUnaryExpressionImpl(UNARY_EXPRESSION)
                    NimUnaryOpImpl(UNARY_OP)
                      PsiElement(NimTokenType.-)('-')
                    PsiWhiteSpace(' ')
                    NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('a')
                      PsiElement(NimTokenType.[)('[')
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('j')
                      PsiElement(NimTokenType.])(']')
              PsiWhiteSpace('\n')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              NimSimpleStatementImpl(SIMPLE_STATEMENT)
                NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                  NimCallExpressionImpl(CALL_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('inc')
                    NimArgumentListImpl(ARGUMENT_LIST)
                      PsiElement(NimTokenType.()('(')
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('j')
                      PsiElement(NimTokenType.))(')\n    ')
            NimDedentationImpl(DEDENTATION)
              <empty list>
        NimSimpleStatementImpl(SIMPLE_STATEMENT)
          NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
            NimCallExpressionImpl(CALL_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('inc')
              NimArgumentListImpl(ARGUMENT_LIST)
                PsiElement(NimTokenType.()('(')
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('k')
                PsiElement(NimTokenType.))(')')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiComment(NimTokenType.<single_line_comment>)('# copy rest of b:')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        NimDedentationImpl(DEDENTATION)
          <empty list>
      NimIfBlockStatementImpl(IF_BLOCK_STATEMENT)
        PsiElement(NimTokenType.when)('when')
        PsiWhiteSpace(' ')
        NimConditionalBlockImpl(CONDITIONAL_BLOCK)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('onlySafeCode')
          PsiElement(NimTokenType.:)(':')
          NimIndentationImpl(INDENTATION)
            PsiElement(NimTokenType.INDENT)('\n    ')
          NimWhileStatementImpl(WHILE_STATEMENT)
            PsiElement(NimTokenType.while)('while')
            PsiWhiteSpace(' ')
            NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('k')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.<)('<')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('j')
            PsiElement(NimTokenType.:)(':')
            NimIndentationImpl(INDENTATION)
              PsiElement(NimTokenType.INDENT)('\n      ')
            NimSimpleStatementImpl(SIMPLE_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
                  NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('a')
                    PsiElement(NimTokenType.[)('[')
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('k')
                    PsiElement(NimTokenType.])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.<)('<')
                  NimUnaryExpressionImpl(UNARY_EXPRESSION)
                    NimUnaryOpImpl(UNARY_OP)
                      PsiElement(NimTokenType.-)('-')
                    PsiWhiteSpace(' ')
                    NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('b')
                      PsiElement(NimTokenType.[)('[')
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('i')
                      PsiElement(NimTokenType.])(']')
              PsiWhiteSpace('\n')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              PsiWhiteSpace(' ')
              NimSimpleStatementImpl(SIMPLE_STATEMENT)
                NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                  NimCallExpressionImpl(CALL_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('inc')
                    NimArgumentListImpl(ARGUMENT_LIST)
                      PsiElement(NimTokenType.()('(')
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('k')
                      PsiElement(NimTokenType.))(')')
                PsiWhiteSpace('\n')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                PsiWhiteSpace(' ')
                NimSimpleStatementImpl(SIMPLE_STATEMENT)
                  NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                    NimCallExpressionImpl(CALL_EXPRESSION)
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('inc')
                      NimArgumentListImpl(ARGUMENT_LIST)
                        PsiElement(NimTokenType.()('(')
                        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(NimTokenType.IDENTIFIER)('i')
                        PsiElement(NimTokenType.))(')\n  ')
            NimDedentationImpl(DEDENTATION)
              <empty list>
          NimDedentationImpl(DEDENTATION)
            <empty list>
        NimElseStatementImpl(ELSE_STATEMENT)
          PsiElement(NimTokenType.else)('else')
          PsiElement(NimTokenType.:)(':')
          NimIndentationImpl(INDENTATION)
            PsiElement(NimTokenType.INDENT)('\n    ')
          NimSimpleStatementImpl(SIMPLE_STATEMENT)
            NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
              NimIfExpressionImpl(IF_EXPRESSION)
                PsiElement(NimTokenType.if)('if')
                PsiWhiteSpace(' ')
                NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('k')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.<)('<')
                  PsiWhiteSpace(' ')
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('j')
                PsiElement(NimTokenType.:)(':')
                PsiWhiteSpace(' ')
                NimCallExpressionImpl(CALL_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('copyMem')
                  NimArgumentListImpl(ARGUMENT_LIST)
                    PsiElement(NimTokenType.()('(')
                    NimCallExpressionImpl(CALL_EXPRESSION)
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('addr')
                      NimArgumentListImpl(ARGUMENT_LIST)
                        PsiElement(NimTokenType.()('(')
                        NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(NimTokenType.IDENTIFIER)('a')
                          PsiElement(NimTokenType.[)('[')
                          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(NimTokenType.IDENTIFIER)('k')
                          PsiElement(NimTokenType.])(']')
                        PsiElement(NimTokenType.))(')')
                    PsiElement(NimTokenType.,)(',')
                    PsiWhiteSpace(' ')
                    NimCallExpressionImpl(CALL_EXPRESSION)
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('addr')
                      NimArgumentListImpl(ARGUMENT_LIST)
                        PsiElement(NimTokenType.()('(')
                        NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(NimTokenType.IDENTIFIER)('b')
                          PsiElement(NimTokenType.[)('[')
                          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(NimTokenType.IDENTIFIER)('i')
                          PsiElement(NimTokenType.])(']')
                        PsiElement(NimTokenType.))(')')
                    PsiElement(NimTokenType.,)(',')
                    PsiWhiteSpace(' ')
                    NimMultiplyExpressionImpl(MULTIPLY_EXPRESSION)
                      NimCallExpressionImpl(CALL_EXPRESSION)
                        NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(NimTokenType.IDENTIFIER)('sizeof')
                        NimArgumentListImpl(ARGUMENT_LIST)
                          PsiElement(NimTokenType.()('(')
                          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(NimTokenType.IDENTIFIER)('T')
                          PsiElement(NimTokenType.))(')')
                      PsiElement(NimTokenType.*)('*')
                      NimParanExpressionImpl(PARAN_EXPRESSION)
                        PsiElement(NimTokenType.()('(')
                        NimAddExpressionImpl(ADD_EXPRESSION)
                          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(NimTokenType.IDENTIFIER)('j')
                          PsiElement(NimTokenType.-)('-')
                          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(NimTokenType.IDENTIFIER)('k')
                        PsiElement(NimTokenType.))(')')
                    PsiElement(NimTokenType.))(')')
          PsiWhiteSpace('\n')
          PsiWhiteSpace('\n')
          NimDedentationImpl(DEDENTATION)
            <empty list>
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.func)('func')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('sort')
      PsiElement(NimTokenType.*)('*')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('cmp')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          NimClosureImpl(CLOSURE)
            PsiElement(NimTokenType.proc)('proc')
            PsiWhiteSpace(' ')
            NimParametersImpl(PARAMETERS)
              PsiElement(NimTokenType.()('(')
              NimParameterImpl(PARAMETER)
                NimParamterNamesImpl(PARAMTER_NAMES)
                  PsiElement(NimTokenType.IDENTIFIER)('x')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.IDENTIFIER)('y')
                PsiElement(NimTokenType.:)(':')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.IDENTIFIER)('T')
              PsiElement(NimTokenType.))(')')
            NimReturnTypeImpl(RETURN_TYPE)
              PsiElement(NimTokenType.:)(':')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.IDENTIFIER)('int')
            PsiWhiteSpace(' ')
            NimPragmaImpl(PRAGMA)
              PsiElement(NimTokenType.{.)('{.')
              PsiElement(NimTokenType.IDENTIFIER)('closure')
              PsiElement(NimTokenType..})('.}')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('order')
          PsiWhiteSpace(' ')
          NimParameterDefaultImpl(PARAMETER_DEFAULT)
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('SortOrder')
              PsiElement(NimTokenType..)('.')
              PsiElement(NimTokenType.IDENTIFIER)('Ascending')
        PsiElement(NimTokenType.))(')')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## Default Nim sort (an implementation of merge sort). The sorting')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## is guaranteed to be stable and the worst case is guaranteed to')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## be O(n log n).')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## The current implementation uses an iterative')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## mergesort to achieve this. It uses a temporary sequence of')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## length ``a.len div 2``. If you do not wish to provide your own')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## ``cmp``, you may use ``system.cmp`` or instead call the overloaded')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## version of ``sort``, which uses ``system.cmp``.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## .. code-block:: nim')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##    sort(myIntArray, system.cmp[int])')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##    # do not use cmp[string] here as we want to use the specialized')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##    # overload:')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##    sort(myStrArray, system.cmp)')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## You can inline adhoc comparison procs with the `do notation')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## <manual.html#procedures-do-notation>`_. Example:')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## .. code-block:: nim')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##   people.sort do (x, y: Person) -> int:')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##     result = cmp(x.surname, y.surname)')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##     if result == 0:')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('##       result = cmp(x.name, y.name)')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimStatementImpl(STATEMENT)
        NimVarDeclarationImpl(VAR_DECLARATION)
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          NimVarSpecImpl(VAR_SPEC)
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('n')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('a')
              PsiElement(NimTokenType..)('.')
              PsiElement(NimTokenType.IDENTIFIER)('len')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimStatementImpl(STATEMENT)
        NimVarDeclarationImpl(VAR_DECLARATION)
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          NimVarSpecImpl(VAR_SPEC)
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('b')
            PsiElement(NimTokenType.:)(':')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.IDENTIFIER)('seq')
      NimSimpleStatementImpl(SIMPLE_STATEMENT)
        NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
          NimArrayLiteralImpl(ARRAY_LITERAL)
            PsiElement(NimTokenType.[)('[')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        NimSimpleStatementImpl(SIMPLE_STATEMENT)
          NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
            NimCallExpressionImpl(CALL_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('newSeq')
              NimArgumentListImpl(ARGUMENT_LIST)
                PsiElement(NimTokenType.()('(')
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('b')
                PsiElement(NimTokenType.,)(',')
                PsiWhiteSpace(' ')
                NimMultiplyExpressionImpl(MULTIPLY_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('n')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.div)('div')
                  PsiWhiteSpace(' ')
                  NimLiteralImpl(LITERAL)
                    NimIntegerImpl(INTEGER)
                      NimSignedIntegerImpl(SIGNED_INTEGER)
                        PsiElement(NimTokenType.INT_LIT)('2')
                PsiElement(NimTokenType.))(')')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimStatementImpl(STATEMENT)
        NimVarDeclarationImpl(VAR_DECLARATION)
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          NimVarSpecImpl(VAR_SPEC)
            NimVarDefinitionImpl(VAR_DEFINITION)
              PsiElement(NimTokenType.IDENTIFIER)('s')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimLiteralImpl(LITERAL)
              NimIntegerImpl(INTEGER)
                NimSignedIntegerImpl(SIGNED_INTEGER)
                  PsiElement(NimTokenType.INT_LIT)('1')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimWhileStatementImpl(WHILE_STATEMENT)
        PsiElement(NimTokenType.while)('while')
        PsiWhiteSpace(' ')
        NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('s')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.<)('<')
          PsiWhiteSpace(' ')
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('n')
        PsiElement(NimTokenType.:)(':')
        NimIndentationImpl(INDENTATION)
          PsiElement(NimTokenType.INDENT)('\n    ')
        NimStatementImpl(STATEMENT)
          NimVarDeclarationImpl(VAR_DECLARATION)
            PsiElement(NimTokenType.var)('var')
            PsiWhiteSpace(' ')
            NimVarSpecImpl(VAR_SPEC)
              NimVarDefinitionImpl(VAR_DEFINITION)
                PsiElement(NimTokenType.IDENTIFIER)('m')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.=)('=')
              PsiWhiteSpace(' ')
              NimAddExpressionImpl(ADD_EXPRESSION)
                NimAddExpressionImpl(ADD_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('n')
                  PsiElement(NimTokenType.-)('-')
                  NimLiteralImpl(LITERAL)
                    NimIntegerImpl(INTEGER)
                      NimSignedIntegerImpl(SIGNED_INTEGER)
                        PsiElement(NimTokenType.INT_LIT)('1')
                PsiElement(NimTokenType.-)('-')
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('s')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        NimWhileStatementImpl(WHILE_STATEMENT)
          PsiElement(NimTokenType.while)('while')
          PsiWhiteSpace(' ')
          NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('m')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType.GT_EQUAL)('>=')
            PsiWhiteSpace(' ')
            NimLiteralImpl(LITERAL)
              NimIntegerImpl(INTEGER)
                NimSignedIntegerImpl(SIGNED_INTEGER)
                  PsiElement(NimTokenType.INT_LIT)('0')
          PsiElement(NimTokenType.:)(':')
          NimIndentationImpl(INDENTATION)
            PsiElement(NimTokenType.INDENT)('\n      ')
          NimSimpleStatementImpl(SIMPLE_STATEMENT)
            NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
              NimCallExpressionImpl(CALL_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('merge')
                NimArgumentListImpl(ARGUMENT_LIST)
                  PsiElement(NimTokenType.()('(')
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('a')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('b')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  NimCallExpressionImpl(CALL_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('max')
                    NimArgumentListImpl(ARGUMENT_LIST)
                      PsiElement(NimTokenType.()('(')
                      NimAddExpressionImpl(ADD_EXPRESSION)
                        NimAddExpressionImpl(ADD_EXPRESSION)
                          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(NimTokenType.IDENTIFIER)('m')
                          PsiElement(NimTokenType.-)('-')
                          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(NimTokenType.IDENTIFIER)('s')
                        PsiElement(NimTokenType.+)('+')
                        NimLiteralImpl(LITERAL)
                          NimIntegerImpl(INTEGER)
                            NimSignedIntegerImpl(SIGNED_INTEGER)
                              PsiElement(NimTokenType.INT_LIT)('1')
                      PsiElement(NimTokenType.,)(',')
                      PsiWhiteSpace(' ')
                      NimLiteralImpl(LITERAL)
                        NimIntegerImpl(INTEGER)
                          NimSignedIntegerImpl(SIGNED_INTEGER)
                            PsiElement(NimTokenType.INT_LIT)('0')
                      PsiElement(NimTokenType.))(')')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('m')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  NimAddExpressionImpl(ADD_EXPRESSION)
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('m')
                    PsiElement(NimTokenType.+)('+')
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('s')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('cmp')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('order')
                  PsiElement(NimTokenType.))(')')
            PsiWhiteSpace('\n')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            PsiWhiteSpace(' ')
            NimSimpleStatementImpl(SIMPLE_STATEMENT)
              NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
                NimCallExpressionImpl(CALL_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('dec')
                  NimArgumentListImpl(ARGUMENT_LIST)
                    PsiElement(NimTokenType.()('(')
                    NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(NimTokenType.IDENTIFIER)('m')
                    PsiElement(NimTokenType.,)(',')
                    PsiWhiteSpace(' ')
                    NimMultiplyExpressionImpl(MULTIPLY_EXPRESSION)
                      NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(NimTokenType.IDENTIFIER)('s')
                      PsiElement(NimTokenType.*)('*')
                      NimLiteralImpl(LITERAL)
                        NimIntegerImpl(INTEGER)
                          NimSignedIntegerImpl(SIGNED_INTEGER)
                            PsiElement(NimTokenType.INT_LIT)('2')
                    PsiElement(NimTokenType.))(')\n    ')
          NimDedentationImpl(DEDENTATION)
            <empty list>
        NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
          NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('s')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.=)('=')
          PsiWhiteSpace(' ')
          NimMultiplyExpressionImpl(MULTIPLY_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('s')
            PsiElement(NimTokenType.*)('*')
            NimLiteralImpl(LITERAL)
              NimIntegerImpl(INTEGER)
                NimSignedIntegerImpl(SIGNED_INTEGER)
                  PsiElement(NimTokenType.INT_LIT)('2')
        PsiWhiteSpace('\n')
        PsiWhiteSpace('\n')
        NimDedentationImpl(DEDENTATION)
          <empty list>
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('sort')
      PsiElement(NimTokenType.*)('*')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.var)('var')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('order')
          PsiWhiteSpace(' ')
          NimParameterDefaultImpl(PARAMETER_DEFAULT)
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('SortOrder')
              PsiElement(NimTokenType..)('.')
              PsiElement(NimTokenType.IDENTIFIER)('Ascending')
        PsiElement(NimTokenType.))(')')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace(' ')
      NimCallExpressionImpl(CALL_EXPRESSION)
        NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('sort')
          PsiElement(NimTokenType.[)('[')
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('T')
          PsiElement(NimTokenType.])(']')
        NimArgumentListImpl(ARGUMENT_LIST)
          PsiElement(NimTokenType.()('(')
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.,)(',')
          PsiWhiteSpace(' ')
          NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('system')
              PsiElement(NimTokenType..)('.')
              PsiElement(NimTokenType.IDENTIFIER)('cmp')
            PsiElement(NimTokenType.[)('[')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
          PsiElement(NimTokenType.,)(',')
          PsiWhiteSpace(' ')
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('order')
          PsiElement(NimTokenType.))(')')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('## Shortcut version of ``sort`` that uses ``system.cmp[T]`` as the comparison function.')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('sorted')
      PsiElement(NimTokenType.*)('*')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('cmp')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          NimClosureImpl(CLOSURE)
            PsiElement(NimTokenType.proc)('proc')
            NimParametersImpl(PARAMETERS)
              PsiElement(NimTokenType.()('(')
              NimParameterImpl(PARAMETER)
                NimParamterNamesImpl(PARAMTER_NAMES)
                  PsiElement(NimTokenType.IDENTIFIER)('x')
                  PsiElement(NimTokenType.,)(',')
                  PsiWhiteSpace(' ')
                  PsiElement(NimTokenType.IDENTIFIER)('y')
                PsiElement(NimTokenType.:)(':')
                PsiWhiteSpace(' ')
                PsiElement(NimTokenType.IDENTIFIER)('T')
              PsiElement(NimTokenType.))(')')
            NimReturnTypeImpl(RETURN_TYPE)
              PsiElement(NimTokenType.:)(':')
              PsiWhiteSpace(' ')
              PsiElement(NimTokenType.IDENTIFIER)('int')
            PsiWhiteSpace(' ')
            NimPragmaImpl(PRAGMA)
              PsiElement(NimTokenType.{.)('{.')
              PsiElement(NimTokenType.IDENTIFIER)('closure')
              PsiElement(NimTokenType..})('.}')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('order')
          PsiWhiteSpace(' ')
          NimParameterDefaultImpl(PARAMETER_DEFAULT)
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('SortOrder')
              PsiElement(NimTokenType..)('.')
              PsiElement(NimTokenType.IDENTIFIER)('Ascending')
        PsiElement(NimTokenType.))(')')
      NimReturnTypeImpl(RETURN_TYPE)
        PsiElement(NimTokenType.:)(':')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.IDENTIFIER)('seq')
        NimGenericsImpl(GENERICS)
          PsiElement(NimTokenType.[)('[')
          PsiElement(NimTokenType.IDENTIFIER)('T')
          PsiElement(NimTokenType.])(']')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## returns ``a`` sorted by ``cmp`` in the specified ``order``.')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<example>)('runnableExamples:')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('let')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('a = [2, 3, 1, 5, 4]')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('b = sorted(a, system.cmp)')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('c = sorted(a, system.cmp, Descending)')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('doAssert b == @[1, 2, 3, 4, 5]')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<doc_runnable>)('doAssert c == @[5, 4, 3, 2, 1]')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
        NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('result')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.=)('=')
        PsiWhiteSpace(' ')
        NimCallExpressionImpl(CALL_EXPRESSION)
          NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('newSeq')
            PsiElement(NimTokenType.[)('[')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
          NimArgumentListImpl(ARGUMENT_LIST)
            PsiElement(NimTokenType.()('(')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('a')
              PsiElement(NimTokenType..)('.')
              PsiElement(NimTokenType.IDENTIFIER)('len')
            PsiElement(NimTokenType.))(')')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      NimWhileStatementImpl(WHILE_STATEMENT)
        PsiElement(NimTokenType.for)('for')
        PsiWhiteSpace(' ')
        NimConditionalExpressionImpl(CONDITIONAL_EXPRESSION)
          NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(NimTokenType.IDENTIFIER)('i')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.in)('in')
          PsiWhiteSpace(' ')
          NimSpreadExpressionImpl(SPREAD_EXPRESSION)
            NimLiteralImpl(LITERAL)
              NimIntegerImpl(INTEGER)
                NimSignedIntegerImpl(SIGNED_INTEGER)
                  PsiElement(NimTokenType.INT_LIT)('0')
            PsiWhiteSpace(' ')
            PsiElement(NimTokenType...)('..')
            PsiWhiteSpace(' ')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('a')
              PsiElement(NimTokenType..)('.')
              PsiElement(NimTokenType.IDENTIFIER)('high')
        PsiElement(NimTokenType.:)(':')
        NimIndentationImpl(INDENTATION)
          PsiElement(NimTokenType.INDENT)('\n    ')
        NimAssignmentStatementImpl(ASSIGNMENT_STATEMENT)
          NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
            NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('result')
              PsiElement(NimTokenType.[)('[')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('i')
              PsiElement(NimTokenType.])(']')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.=)('=')
          PsiWhiteSpace(' ')
          NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('a')
            PsiElement(NimTokenType.[)('[')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('i')
            PsiElement(NimTokenType.])(']\n  ')
        NimDedentationImpl(DEDENTATION)
          <empty list>
      NimSimpleStatementImpl(SIMPLE_STATEMENT)
        NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
          NimCallExpressionImpl(CALL_EXPRESSION)
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(NimTokenType.IDENTIFIER)('sort')
            NimArgumentListImpl(ARGUMENT_LIST)
              PsiElement(NimTokenType.()('(')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('result')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('cmp')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('order')
              PsiElement(NimTokenType.))(')')
      PsiWhiteSpace('\n')
      PsiWhiteSpace('\n')
      NimDedentationImpl(DEDENTATION)
        <empty list>
  NimTopDeclarationImpl(TOP_DECLARATION)
    NimProcedureMethodImpl(PROCEDURE_METHOD)
      PsiElement(NimTokenType.proc)('proc')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.IDENTIFIER)('sorted')
      PsiElement(NimTokenType.*)('*')
      NimGenericsImpl(GENERICS)
        PsiElement(NimTokenType.[)('[')
        PsiElement(NimTokenType.IDENTIFIER)('T')
        PsiElement(NimTokenType.])(']')
      NimParametersImpl(PARAMETERS)
        PsiElement(NimTokenType.()('(')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('a')
          PsiElement(NimTokenType.:)(':')
          PsiWhiteSpace(' ')
          PsiElement(NimTokenType.IDENTIFIER)('openArray')
          NimGenericsImpl(GENERICS)
            PsiElement(NimTokenType.[)('[')
            PsiElement(NimTokenType.IDENTIFIER)('T')
            PsiElement(NimTokenType.])(']')
        PsiElement(NimTokenType.,)(',')
        PsiWhiteSpace(' ')
        NimParameterImpl(PARAMETER)
          NimParamterNamesImpl(PARAMTER_NAMES)
            PsiElement(NimTokenType.IDENTIFIER)('order')
          PsiWhiteSpace(' ')
          NimParameterDefaultImpl(PARAMETER_DEFAULT)
            PsiElement(NimTokenType.=)('=')
            PsiWhiteSpace(' ')
            NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('SortOrder')
              PsiElement(NimTokenType..)('.')
              PsiElement(NimTokenType.IDENTIFIER)('Ascending')
        PsiElement(NimTokenType.))(')')
      NimReturnTypeImpl(RETURN_TYPE)
        PsiElement(NimTokenType.:)(':')
        PsiWhiteSpace(' ')
        PsiElement(NimTokenType.IDENTIFIER)('seq')
        NimGenericsImpl(GENERICS)
          PsiElement(NimTokenType.[)('[')
          PsiElement(NimTokenType.IDENTIFIER)('T')
          PsiElement(NimTokenType.])(']')
      PsiWhiteSpace(' ')
      PsiElement(NimTokenType.=)('=')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiComment(NimTokenType.<single_line_comment>)('## Shortcut version of ``sorted`` that uses ``system.cmp[T]`` as the comparison function.')
      NimIndentationImpl(INDENTATION)
        PsiElement(NimTokenType.INDENT)('\n  ')
      NimSimpleStatementImpl(SIMPLE_STATEMENT)
        NimLeftHandExprListImpl(LEFT_HAND_EXPR_LIST)
          NimCallExpressionImpl(CALL_EXPRESSION)
            NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('sorted')
              PsiElement(NimTokenType.[)('[')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('T')
              PsiElement(NimTokenType.])(']')
            NimArgumentListImpl(ARGUMENT_LIST)
              PsiElement(NimTokenType.()('(')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('a')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimIndexOrSliceExpressionImpl(INDEX_OR_SLICE_EXPRESSION)
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(NimTokenType.IDENTIFIER)('system')
                  PsiElement(NimTokenType..)('.')
                  PsiElement(NimTokenType.IDENTIFIER)('cmp')
                PsiElement(NimTokenType.[)('[')
                NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(NimTokenType.IDENTIFIER)('T')
                PsiElement(NimTokenType.])(']')
              PsiElement(NimTokenType.,)(',')
              PsiWhiteSpace(' ')
              NimReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(NimTokenType.IDENTIFIER)('order')
              PsiElement(NimTokenType.))(')')
      PsiWhiteSpace('\n')
      PsiWhiteSpace('\n')
      NimDedentationImpl(DEDENTATION)
        <empty list>
  PsiElement(NimTokenType.template)('template')
  PsiWhiteSpace(' ')
  PsiElement(NimTokenType.IDENTIFIER)('sortedByIt')
  PsiElement(NimTokenType.*)('*')
  PsiElement(NimTokenType.()('(')
  PsiElement(NimTokenType.IDENTIFIER)('seq1')
  PsiElement(NimTokenType.,)(',')
  PsiWhiteSpace(' ')
  PsiElement(NimTokenType.IDENTIFIER)('op')
  PsiElement(NimTokenType.:)(':')
  PsiWhiteSpace(' ')
  PsiElement(NimTokenType.IDENTIFIER)('untyped')
  PsiElement(NimTokenType.))(')')
  PsiElement(NimTokenType.:)(':')
  PsiWhiteSpace(' ')
  PsiElement(NimTokenType.IDENTIFIER)('untyped')
  PsiWhiteSpace(' ')
  PsiElement(NimTokenType.=)('=')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('## Convenience template around the ``sorted`` proc to reduce typing.')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('##')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('## The template injects the ``it`` variable which you can use directly in an')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('## expression. Example:')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('##')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('## .. code-block:: nim')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('##')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('##   type Person = tuple[name: string, age: int]')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('##   var')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('##     p1: Person = (name: "p1", age: 60)')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('##     p2: Person = (name: "p2", age: 20)')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('##     p3: Person = (name: "p3", age: 30)')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('##     p4: Person = (name: "p4", age: 30)')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('##     people = @[p1,p2,p4,p3]')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('##')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('##   echo people.sortedByIt(it.name)')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('##')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('## Because the underlying ``cmp()`` is defined for tuples you can do')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('## a nested sort like in the following example:')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('##')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('## .. code-block:: nim')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('##')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('##   echo people.sortedByIt((it.age, it.name))')
  PsiWhiteSpace('\n')
  PsiWhiteSpace(' ')
  PsiWhiteSpace(' ')
  PsiComment(NimTokenType.<single_line_comment>)('##')
  PsiElement(NimTokenType.INDENT)('\n  ')
  PsiElement(NimTokenType.var)('var')
  PsiWhiteSpace(' ')
  PsiElement(NimTokenType.IDENTIFIER)('result')
  PsiWhiteSpace(' ')
  PsiElement(NimTokenType.=)('=')
  PsiWhiteSpace(' ')
  PsiElement(NimTokenType.IDENTIFIER)('sorted')
  PsiElement(NimTokenType.()('(')
  PsiElement(NimTokenType.IDENTIFIER)('seq1')
  PsiElement(NimTokenType.,)(',')
  PsiWhiteSpace(' ')
  PsiElement(NimTokenType.proc)('proc')
  PsiElement(NimTokenType.()('(')
  PsiElement(NimTokenType.IDENTIFIER)('x')
  PsiElement(NimTokenType.,)(',')
  PsiWhiteSpace(' ')
  PsiElement(NimTokenType.IDENTIFIER)('y')
  PsiElement(NimTokenType.:)(':')
  PsiWhiteSpace(' ')
  PsiElement(NimTokenType.IDENTIFIER)('type')
  PsiElement(NimTokenType.()('(')
  PsiElement(NimTokenType.IDENTIFIER)('seq1')
  PsiElement(NimTokenType.[)('[')
  PsiErrorElement:<expression> or NimTokenType.IDENTIFIER expected, got '0])): int =
    var ...'
    PsiElement(BAD_CHARACTER)('0])): int =\n    var it {.inject.} = x\n    let a = op\n    it = y\n    let b = op\n    result = cmp(a, b))\n  result\n\nfunc isSorted*[T](a: openArray[T],\n                 cmp: proc(x, y: T): int {.closure.},\n                 order = SortOrder.Ascending): bool =\n  ## checks to see whether ``a`` is already sorted in ``order``\n  ## using ``cmp`` for the comparison. Parameters identical\n  ## to ``sort``.\n  result = true\n  for i in 0..<len(a)-1:\n    if cmp(a[i],a[i+1]) * order > 0:\n      return false\n\nproc isSorted*[T](a: openarray[T], order = SortOrder.Ascending): bool =\n  ## Shortcut version of ``isSorted`` that uses ``system.cmp[T]`` as the comparison function.\n  isSorted(a, system.cmp[T], order)\n\nproc product*[T](x: openArray[seq[T]]): seq[seq[T]] =\n  ## produces the Cartesian product of the array. Warning: complexity\n  ## may explode.\n  result = newSeq[seq[T]]()\n  if x.len == 0:\n    return\n  if x.len == 1:\n    result = @x\n    return\n  var\n    indexes = newSeq[int](x.len)\n    initial = newSeq[int](x.len)\n    index = 0\n  var next = newSeq[T]()\n  next.setLen(x.len)\n  for i in 0..(x.len-1):\n    if len(x[i]) == 0: return\n    initial[i] = len(x[i])-1\n  indexes = initial\n  while true:\n    while indexes[index] == -1:\n      indexes[index] = initial[index]\n      index += 1\n      if index == x.len: return\n      indexes[index] -= 1\n    for ni, i in indexes:\n      next[ni] = x[ni][i]\n    var res: seq[T]\n    shallowCopy(res, next)\n    result.add(res)\n    index = 0\n    indexes[index] -= 1\n\nproc nextPermutation*[T](x: var openarray[T]): bool {.discardable.} =\n  ## calculates the next lexicographic permutation, directly modifying ``x``.\n  ## The result is whether a permutation happened, otherwise we have reached\n  ## the last-ordered permutation.\n  ##\n  ## .. code-block:: nim\n  ##\n  ##     var v = @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  ##     v.nextPermutation()\n  ##     echo v # @[0, 1, 2, 3, 4, 5, 6, 7, 9, 8]\n  if x.len < 2:\n    return false\n\n  var i = x.high\n  while i > 0 and x[i-1] >= x[i]:\n    dec i\n\n  if i == 0:\n    return false\n\n  var j = x.high\n  while j >= i and x[j] <= x[i-1]:\n    dec j\n\n  swap x[j], x[i-1]\n  x.reverse(i, x.high)\n\n  result = true\n\nproc prevPermutation*[T](x: var openarray[T]): bool {.discardable.} =\n  ## calculates the previous lexicographic permutation, directly modifying\n  ## ``x``. The result is whether a permutation happened, otherwise we have\n  ## reached the first-ordered permutation.\n  ##\n  ## .. code-block:: nim\n  ##\n  ##     var v = @[0, 1, 2, 3, 4, 5, 6, 7, 9, 8]\n  ##     v.prevPermutation()\n  ##     echo v # @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  if x.len < 2:\n    return false\n\n  var i = x.high\n  while i > 0 and x[i-1] <= x[i]:\n    dec i\n\n  if i == 0:\n    return false\n\n  x.reverse(i, x.high)\n\n  var j = x.high\n  while j >= i and x[j-1] < x[i-1]:\n    dec j\n\n  swap x[i-1], x[j]\n\n  result = true\n\nwhen isMainModule:\n  # Tests for lowerBound\n  var arr = @[1,2,3,5,6,7,8,9]\n  assert arr.lowerBound(0) == 0\n  assert arr.lowerBound(4) == 3\n  assert arr.lowerBound(5) == 3\n  assert arr.lowerBound(10) == 8\n  arr = @[1,5,10]\n  assert arr.lowerBound(4) == 1\n  assert arr.lowerBound(5) == 1\n  assert arr.lowerBound(6) == 2\n  # Tests for isSorted\n  var srt1 = [1,2,3,4,4,4,4,5]\n  var srt2 = ["iello","hello"]\n  var srt3 = [1.0,1.0,1.0]\n  var srt4: seq[int]\n  assert srt1.isSorted(cmp) == true\n  assert srt2.isSorted(cmp) == false\n  assert srt3.isSorted(cmp) == true\n  assert srt4.isSorted(cmp) == true\n  var srtseq = newSeq[int]()\n  assert srtseq.isSorted(cmp) == true\n  # Tests for reversed\n  var arr1 = @[0,1,2,3,4]\n  assert arr1.reversed() == @[4,3,2,1,0]\n  for i in 0 .. high(arr1):\n    assert arr1.reversed(0, i) == arr1.reversed()[high(arr1) - i .. high(arr1)]\n    assert arr1.reversed(i, high(arr1)) == arr1.reversed()[0 .. high(arr1) - i]\n\n\nproc rotateInternal[T](arg: var openarray[T]; first, middle, last: int): int =\n  ## A port of std::rotate from c++. Ported from `this reference <http://www.cplusplus.com/reference/algorithm/rotate/>`_.\n  result = first + last - middle\n\n  if first == middle or middle == last:\n    return\n\n  assert first < middle\n  assert middle < last\n\n  # m prefix for mutable\n  var\n    mFirst = first\n    mMiddle = middle\n    next = middle\n\n  swap(arg[mFirst], arg[next])\n  mFirst += 1\n  next += 1\n  if mFirst == mMiddle:\n    mMiddle = next\n\n  while next != last:\n    swap(arg[mFirst], arg[next])\n    mFirst += 1\n    next += 1\n    if mFirst == mMiddle:\n      mMiddle = next\n\n  next = mMiddle\n  while next != last:\n    swap(arg[mFirst], arg[next])\n    mFirst += 1\n    next += 1\n    if mFirst == mMiddle:\n      mMiddle = next\n    elif next == last:\n      next = mMiddle\n\nproc rotatedInternal[T](arg: openarray[T]; first, middle, last: int): seq[T] =\n  result = newSeq[T](arg.len)\n  for i in 0 ..< first:\n    result[i] = arg[i]\n  let N = last - middle\n  let M = middle - first\n  for i in 0 ..< N:\n    result[first+i] = arg[middle+i]\n  for i in 0 ..< M:\n    result[first+N+i] = arg[first+i]\n  for i in last ..< arg.len:\n    result[i] = arg[i]\n\nproc rotateLeft*[T](arg: var openarray[T]; slice: HSlice[int, int]; dist: int): int {.discardable.} =\n  ## performs a left rotation on a range of elements. If you want to rotate\n  ## right, use a negative ``dist``. Specifically, ``rotateLeft`` rotates\n  ## the elements at ``slice`` by ``dist`` positions.\n  ##\n  ## | The element at index ``slice.a + dist`` will be at index ``slice.a``.\n  ## | The element at index ``slice.b`` will be at ``slice.a + dist -1``.\n  ## | The element at index ``slice.a`` will be at ``slice.b + 1 - dist``.\n  ## | The element at index ``slice.a + dist - 1`` will be at ``slice.b``.\n  ##\n  ## Elements outside of ``slice`` will be left unchanged.\n  ## The time complexity is linear to ``slice.b - slice.a + 1``.\n  ##\n  ## ``slice``\n  ##   The indices of the element range that should be rotated.\n  ##\n  ## ``dist``\n  ##   The distance in amount of elements that the data should be rotated.\n  ##   Can be negative, can be any number.\n  ##\n  ## .. code-block:: nim\n  ##\n  ##   var list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  ##   list.rotateLeft(1 .. 8, 3)\n  ##   doAssert list == [0, 4, 5, 6, 7, 8, 1, 2, 3, 9, 10]\n  let sliceLen = slice.b + 1 - slice.a\n  let distLeft = ((dist mod sliceLen) + sliceLen) mod sliceLen\n  arg.rotateInternal(slice.a, slice.a+distLeft, slice.b + 1)\n\nproc rotateLeft*[T](arg: var openarray[T]; dist: int): int {.discardable.} =\n  ## Default arguments for slice, so that this procedure operates on the entire\n  ## ``arg``, and not just on a part of it.\n  runnableExamples:\n      var a = [1, 2, 3, 4, 5]\n      a.rotateLeft(2)\n      doAssert a == [3, 4, 5, 1, 2]\n  let arglen = arg.len\n  let distLeft = ((dist mod arglen) + arglen) mod arglen\n  arg.rotateInternal(0, distLeft, arglen)\n\nproc rotatedLeft*[T](arg: openarray[T]; slice: HSlice[int, int], dist: int): seq[T] =\n  ## Same as ``rotateLeft``, just with the difference that it does\n  ## not modify the argument. It creates a new ``seq`` instead.\n  let sliceLen = slice.b + 1 - slice.a\n  let distLeft = ((dist mod sliceLen) + sliceLen) mod sliceLen\n  arg.rotatedInternal(slice.a, slice.a+distLeft, slice.b+1)\n\nproc rotatedLeft*[T](arg: openarray[T]; dist: int): seq[T] =\n  ## Same as ``rotateLeft``, just with the difference that it does\n  ## not modify the argument. It creates a new ``seq`` instead.\n  let arglen = arg.len\n  let distLeft = ((dist mod arglen) + arglen) mod arglen\n  arg.rotatedInternal(0, distLeft, arg.len)\n\nwhen isMainModule:\n  var list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  let list2 = list.rotatedLeft(1 ..< 9, 3)\n  let expected = [0, 4, 5, 6, 7, 8, 1, 2, 3, 9, 10]\n\n  doAssert list.rotateLeft(1 ..< 9, 3) == 6\n  doAssert list == expected\n  doAssert list2 == @expected\n\n  var s0,s1,s2,s3,s4,s5 = "xxxabcdefgxxx"\n\n  doAssert s0.rotateLeft(3 ..< 10, 3) == 7\n  doAssert s0 == "xxxdefgabcxxx"\n  doAssert s1.rotateLeft(3 ..< 10, 2) == 8\n  doAssert s1 == "xxxcdefgabxxx"\n  doAssert s2.rotateLeft(3 ..< 10, 4) == 6\n  doAssert s2 == "xxxefgabcdxxx"\n  doAssert s3.rotateLeft(3 ..< 10, -3) == 6\n  doAssert s3 == "xxxefgabcdxxx"\n  doAssert s4.rotateLeft(3 ..< 10, -10) == 6\n  doAssert s4 == "xxxefgabcdxxx"\n  doAssert s5.rotateLeft(3 ..< 10, 11) == 6\n  doAssert s5 == "xxxefgabcdxxx"\n\n  block product:\n    doAssert product(newSeq[seq[int]]()) == newSeq[seq[int]](), "empty input"\n    doAssert product(@[newSeq[int](), @[], @[]]) == newSeq[seq[int]](), "bit more empty input"\n    doAssert product(@[@[1,2]]) == @[@[1,2]], "a simple case of one element"\n    doAssert product(@[@[1,2], @[3,4]]) == @[@[2,4],@[1,4],@[2,3],@[1,3]], "two elements"\n    doAssert product(@[@[1,2], @[3,4], @[5,6]]) == @[@[2,4,6],@[1,4,6],@[2,3,6],@[1,3,6], @[2,4,5],@[1,4,5],@[2,3,5],@[1,3,5]], "three elements"\n    doAssert product(@[@[1,2], @[]]) == newSeq[seq[int]](), "two elements, but one empty"\n\n  block lowerBound:\n    doAssert lowerBound([1,2,4], 3, system.cmp[int]) == 2\n    doAssert lowerBound([1,2,2,3], 4, system.cmp[int]) == 4\n    doAssert lowerBound([1,2,3,10], 11) == 4\n\n  block upperBound:\n    doAssert upperBound([1,2,4], 3, system.cmp[int]) == 2\n    doAssert upperBound([1,2,2,3], 3, system.cmp[int]) == 4\n    doAssert upperBound([1,2,3,5], 3) == 3\n\n  block fillEmptySeq:\n    var s = newSeq[int]()\n    s.fill(0)\n\n  block testBinarySearch:\n    var noData: seq[int]\n    doAssert binarySearch(noData, 7) == -1\n    let oneData = @[1]\n    doAssert binarySearch(oneData, 1) == 0\n    doAssert binarySearch(onedata, 7) == -1\n    let someData = @[1,3,4,7]\n    doAssert binarySearch(someData, 1) == 0\n    doAssert binarySearch(somedata, 7) == 3\n    doAssert binarySearch(someData, -1) == -1\n    doAssert binarySearch(someData, 5) == -1\n    doAssert binarySearch(someData, 13) == -1\n    let moreData = @[1,3,5,7,4711]\n    doAssert binarySearch(moreData, -1) == -1\n    doAssert binarySearch(moreData,  1) == 0\n    doAssert binarySearch(moreData,  5) == 2\n    doAssert binarySearch(moreData,  6) == -1\n    doAssert binarySearch(moreData,  4711) == 4\n    doAssert binarySearch(moreData,  4712) == -1')