
buildscript {
    repositories {
        mavenCentral()
//        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
    }

}
plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.4.15'

    id "org.jetbrains.grammarkit" version "2019.3"
    id("org.asciidoctor.convert") version "1.5.9.2"
}

apply plugin: 'org.jetbrains.grammarkit'
apply plugin: 'idea'

// import is optional to make task creation easier
import org.jetbrains.grammarkit.tasks.*
group 'org.nim'
version '1.0-SNAPSHOT'

sourceCompatibility = 11

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java.srcDirs 'src/main/java', 'build/generated'
        resources.srcDirs 'src/main/resources'
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'
    compile group: 'com.google.guava', name: 'guava', version: '27.0-jre'
    compile group: 'org.jodd', name: 'jodd-core', version: '5.0.5'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.11.1'

}


//
//task pathingJar(type: Jar) {
//    dependsOn configurations.compile
//    appendix = 'pathing'
//    configurations.all {
//        println(it.name)
//        if(it.name != 'apiElements' && it.name != 'asciidoctor' && it.name != 'implementation' && it.name != 'runtimeElements' && it.name != 'runtimeOnly') {
//            println(it.files)
//        }
//    }
//    List<File> files = new ArrayList<>()
//    files.addAll(configurations.compile.files)
//    files.addAll(configurations.provided.files)
//    doFirst {
//        manifest {
//            attributes "Class-Path": files.collect {
//                it.toURL().toString().replaceFirst("file:/+", '/')
//            }.join(' ')
//        }
//    }
//}

intellij {
    pluginName = 'nim-plugin'
    instrumentCode = false
    //This is Here for reference
    plugins 'java', 'gradle'
    version '2019.3'
    if(System.getProperty('os.name').startsWith('Windows')){
        ideaDependencyCachePath = 'C:\\idea'
    }
   
}
patchPluginXml {
    changeNotes """
      Add change notes here.<br>
      <em>most HTML tags may be used</em>"""
}

tasks.withType(Test) {
    useJUnit {
      //  include '**/*Test.*' // any Java or Kotlin class that ends with 'Test'
    }
    include '**/*Test.*'
}

task generateNimLexer(type: GenerateLexer) {
    group 'grammar'
    // source flex file
    File rootSrc = project.sourceSets.main.java.srcDirs[0];
    source = new File(rootSrc, "org/nim/grammar/nim.flex").path

    // target directory for lexer
    targetDir = new File(project.buildDir, "/generated/org/nim/grammar/").path

    // target classname, target file will be targetDir/targetClass.java
    targetClass = "NimLexer"

    // optional, path to the task-specific skeleton file. Default: none
    //skeleton = '/some/specific/skeleton'

    // if set, plugin will remove a lexer output file before generating new one. Default: false
    purgeOldFiles = true
}

task generateNimParser(type: GenerateParser) {
    group 'grammar'
//    dependsOn pathingJar
//    doFirst {
//        classpath = files("$buildDir/classes/main", "$buildDir/resources/main", pathingJar.archivePath)
//    }
    // source bnf file
    File rootSrc = project.sourceSets.main.java.srcDirs[0];
    source =  new File(rootSrc, "org/nim/grammar/nim.bnf").path

    // optional, task-specific root for the generated files. Default: none
    targetRoot = new File(project.buildDir, "/generated/").path

    // path to a parser file, relative to the targetRoot
    pathToParser = '/org/nim/grammar/NimParser.java'

    // path to a directory with generated psi files, relative to the targetRoot
    pathToPsiRoot = '/org/nim/psi'

    // if set, plugin will remove a parser output file and psi output directory before generating new ones. Default: false
    purgeOldFiles = true

}


task generateNimbleLexer(type: GenerateLexer) {
    group 'grammar'
    // source flex file
    File rootSrc = project.sourceSets.main.java.srcDirs[0];
    source = new File(rootSrc, "org/nim/nimble/nimble.flex").path

    // target directory for lexer
    targetDir = new File(project.buildDir, "/generated/org/nim/nimble/").path

    // target classname, target file will be targetDir/targetClass.java
    targetClass = "NimbleLexer"

    // optional, path to the task-specific skeleton file. Default: none
    //skeleton = '/some/specific/skeleton'

    // if set, plugin will remove a lexer output file before generating new one. Default: false
    purgeOldFiles = true
}

task generateNimbleParser(type: GenerateParser) {
    group 'grammar'
//    dependsOn pathingJar
//    doFirst {
//        classpath = files("$buildDir/classes/main", "$buildDir/resources/main", pathingJar.archivePath)
//    }
    // source bnf file
    File rootSrc = project.sourceSets.main.java.srcDirs[0];
    source =  new File(rootSrc, "org/nim/nimble/nimble.bnf").path

    // optional, task-specific root for the generated files. Default: none
    targetRoot = new File(project.buildDir, "/generated/").path

    // path to a parser file, relative to the targetRoot
    pathToParser = '/org/nim/nimble/NimbleParser.java'

    // path to a directory with generated psi files, relative to the targetRoot
    pathToPsiRoot = '/org/nim/nimble/psi'

    // if set, plugin will remove a parser output file and psi output directory before generating new ones. Default: false
    purgeOldFiles = true

}


idea {
    module {
        generatedSourceDirs += file('build/generated')

    }
}